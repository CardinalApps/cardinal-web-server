(()=>{var e={4856:(e,t,i)=>{e.exports={DatabaseService:i(9602),dbIpc:i(9110)}},9602:(e,t,i)=>{const r=i(9101).verbose(),a=i(5747),s=i(5622),n=i(6192),o=i(9495),u=i(6412);e.exports=class{constructor(e){if(!e)throw new Error("DatabaseService requires an options object");if(!("systemDir"in e))throw new Error("DatabaseService requires the 'systemDir' option");if(!("appDir"in e))throw new Error("DatabaseService requires the 'appDir' option");if(!("databaseFileName"in e))throw new Error("DatabaseService requires the 'databaseFileName' option");if(!("imageCacheDirName"in e))throw new Error("DatabaseService requires the 'imageCacheDirName' option");if(!("tables"in e))throw new Error("DatabaseService requires the 'tables' option");this.constructorOptions=e,this.sqlite=null,this.prefix=e.tablePrefix||"",this.appFilesPath=s.join(e.systemDir,e.appDir),this.sqlitePath=s.join(this.appFilesPath,e.databaseFileName),this.imageCacheDir=s.join(this.appFilesPath,e.imageCacheDirName),this.artworkDir=s.join(this.imageCacheDir,"artwork"),this.artworkThumbDirs={75:s.join(this.artworkDir,"75"),150:s.join(this.artworkDir,"150"),300:s.join(this.artworkDir,"300")},this.artistDir=s.join(this.imageCacheDir,"artists"),this.artistThumbDirs={150:s.join(this.artistDir,"150"),300:s.join(this.artistDir,"300"),600:s.join(this.artistDir,"600")},this.logging=e.logging||!1,this.tables=o[e.tables],this.defaultRows=u[e.tables]}connect(){return new Promise(((e,t)=>{a.existsSync(this.appFilesPath)||a.mkdirSync(this.appFilesPath),this.sqlite=new r.Database(this.sqlitePath,(i=>{null!==i?t(new Error("Cannot establish database connection")):(this.logging&&console.log("Database connected"),e(!0))}))}))}isConnected(){return"object"==typeof this.sqlite&&"open"in this.sqlite&&this.sqlite.open}deleteDatabase(e="no"){return new Promise(((t,i)=>{if("yes"!==e)throw new Error('You must type "yes" as the first arguement of db.deleteDatabase()');if(!this.isConnected())throw new Error("Database connection required");this.sqlite.close(),a.unlink(this.sqlitePath,(e=>{e?i(err):(this.logging&&console.log("sqlite3 database deleted"),t())}))}))}build(e){return new Promise((async(e,t)=>{if(!this.isConnected())throw new Error("Databse connection required");try{let t=await this.buildTables(),i=await this.setDefaultState();t&&i&&e(!0)}catch(e){console.warn(e)}}))}buildTables(){return new Promise(((e,t)=>{if(!this.isConnected())throw new Error("Database connection required");let i=Object.keys(this.tables);this.sqlite.serialize((()=>{i.forEach(((r,a)=>{let s=this.tables[r];this.prefix&&(s=s.replace(`EXISTS ${r}(`,`EXISTS ${this.prefix}${r}(`)),this.sqlite.run(s,[],(r=>{null===r?a===i.length-1&&e(!0):t(new Error("Error creating database table"))}))}))}))}))}verify(){return new Promise((async(e,t)=>{if(!this.isConnected())throw new Error("Database connection required");try{if(!await this.verifyTables())return void e(!1);if(!await this.verifyDefaultState())return void e(!1);e(!0)}catch(e){console.warn(e)}}))}verifyTables(){return new Promise(((e,t)=>{if(!this.isConnected())throw new Error("Database connection required");this.sqlite.serialize((()=>{let t=Object.keys(this.tables),i=this.prefix;t.forEach(((r,a)=>{let s=`${i}${r}`;this.sqlite.get(`SELECT name FROM sqlite_master WHERE type='table' AND name='${s}'`,[],((i,n)=>{if(null!==i)throw i;void 0!==n&&n.name===s?(this.logging&&console.log(`table ${r} exists`),a===t.length-1&&e(!0)):e(!1)}))}))}))}))}getDefaultValues(){let e=this.defaultRows,t=this.constructorOptions.defaults;if(!e&&!t)return null;let i=Array.from(new Set([...Object.keys(e||[]),...Object.keys(t||[])])),r={};for(let a of i){let i={};e&&(i={...e[a]}),t&&(i={...i,...t[a]}),r[a]={...i}}return r}verifyDefaultState(){return new Promise((async(e,t)=>{if(!this.isConnected())throw new Error("Databse connection required");let i=this.getDefaultValues();if(!i)return e(!0);for(let t in i.options){if(void 0===await this.getOption(t)){this.logging&&console.log("New database option detected"),e(!1);break}this.logging&&console.log(`${this.prefix}options default option ${t} exists`)}e(!0)}))}setDefaultState(){return new Promise((async(e,t)=>{if(!this.isConnected())throw new Error("Database connection required");let i=this.getDefaultValues();if(!i)return e(!0);for(let e in i.options)void 0===await this.getOption(e)&&await this.setOption(e,i.options[e]);e(!0)}))}getOption(e){return new Promise(((t,i)=>{if(!this.isConnected())throw new Error("Databse connection required");let r=`SELECT value FROM ${this.prefix}options WHERE key = $option`,a=this;this.sqlite.get(r,{$option:e},(function(e,r){null===e?t(void 0!==r?a.prepareValueForReturn(r.value):void 0):i(new Error(e))}))}))}getAllOptions(){return new Promise(((e,t)=>{if(!this.isConnected())throw new Error("Database connection required");let i=`SELECT * from ${this.prefix}options`;this.sqlite.all(i,[],((i,r)=>{null!==i&&t(new Error(i)),e(this.jsonifyValues(r))}))}))}setOption(e,t,i=!0){return new Promise((async(r,a)=>{if(!this.isConnected())throw new Error("Database connection required");let s,n;if(null!=await this.getOption(e)){if(s=!0,!i)return void r(!1)}else s=!1;n=s?`\n            UPDATE ${this.prefix}options\n            SET key = $option,\n                value = $value\n            WHERE key = $option`:`\n            INSERT INTO ${this.prefix}options (key, value)\n            VALUES ($option, $value)`;let o=this.prepareValueForInsert(t);this.sqlite.run(n,{$option:e,$value:o},(function(e){null===e?r(!0):a(new Error(e))}))}))}looseValueCompare(e,t){return"object"==typeof e&&(e=JSON.stringify(e)),"object"==typeof t&&(t=JSON.stringify(t)),e==t}prepareValueForInsert(e){return null===e?e:"object"==typeof e?JSON.stringify(e):"number"==typeof e?e.toString():e}prepareValueForReturn(e){if(null==e)return e;let t;try{t=JSON.parse(e)}catch(t){return e}return t}jsonifyValues(e){let t,i;return Array.isArray(e)?(t=e,i=!0):(t=[e],i=!1),t.forEach(((e,i)=>{for(let r in e)if("string"==typeof e[r])try{let a=JSON.parse(e[r]);t[i][r]=a}catch(e){}})),i?t:t[0]}async execute(e,t){return console.log("db.execute() is deprecated, use db.all() instead"),await this.all(e,t)}all(e,t=[]){return new Promise(((i,r)=>{if(!this.isConnected())throw new Error("Database connection required");this.sqlite.all(e,t,((e,t)=>{if(null!==e)throw e;return i(this.jsonifyValues(t))}))}))}get(e,t=[]){return new Promise(((i,r)=>{if(!this.isConnected())throw new Error("Database connection required");this.sqlite.get(e,t,((e,t)=>{if(null!==e)throw e;return i(t?this.jsonifyValues(t):null)}))}))}run(e,t=[]){return new Promise(((i,r)=>{if(!this.isConnected())throw new Error("Database connection required");e.includes("UPDATE")||e.includes("DELETE")?this.sqlite.run(e,t,(function(e){if(null!==e)throw e;return this.changes?i(this.changes):i(!1)})):e.includes("INSERT")?this.sqlite.run(e,t,(function(e){if(null!==e)throw e;return this.lastID?i(this.lastID):i(!1)})):console.error("db.run() does not support that SQL statement. Use db.all() or db.get() instead.")}))}async createRow(e,t){if(!this.isConnected())throw new Error("Database connection required");let i=await this.run(`INSERT INTO ${this.prefix}${e} DEFAULT VALUES`);return await this.updateRow(e,i,t),await this.getRow(e,i)}getRow(e,t){return new Promise(((i,r)=>{if(!this.isConnected())throw new Error("Database connection required");let a=`SELECT * FROM ${this.prefix}${e} WHERE id = $id`,s={$id:t};this.sqlite.get(a,s,((e,t)=>{null!==e&&r(new Error(e)),void 0===t&&i(null),i(this.jsonifyValues(t))}))}))}updateRow(e,t,i){return new Promise((async(r,a)=>{if(!this.isConnected())throw new Error("Database connection required");let s=`UPDATE ${this.prefix}${e}\nSET `;for(let e in i)s+=`${e} = $val${e},\n`;s=s.slice(0,s.length-2),s+="\nWHERE id = $id";let n={$id:t};for(let e in i)n["$val"+e]=this.prepareValueForInsert(i[e]);this.sqlite.run(s,n,(function(e){if(null!==e)throw e;return this.changes?r(!0):r(!1)}))}))}async update(e,t,i){return await this.updateRow(e,t,i)}deleteRow(e,t){return new Promise(((i,r)=>{if(!this.isConnected())throw new Error("Database connection required");let a=`DELETE FROM ${this.prefix}${e} WHERE id = $id`,s={$id:t};this.sqlite.run(a,s,(function(e){null!==e&&r(new Error(e)),this.changes||i(!1),i(!0)}))}))}async mergeRows(e,t,i){if(!this.isConnected())throw new Error("Database connection required");let r=await this.getRow(e,t),a=await this.getRow(e,i);if(!r)throw new Error("Invalid master row ID");if(!a)throw new Error("Invalid source row ID");let s={...r};for(let[e,t]of Object.entries(s))(null===t||""===t&&null!==a[e])&&(s[e]=a[e]);try{await this.update(e,t,s)}catch(r){throw console.error(`Something went wrong when merging rows in table ${e}: ${t} and ${i}`),r}if(!await this.deleteRow(e,i))throw new Error("Something went wrong when deleting merged row");return s}getCache(e){return new Promise(((t,i)=>{if(!this.isConnected())throw new Error("Databse connection required");let r=`SELECT cache_value FROM ${this.prefix}cache WHERE cache_key = $key`,a=this;this.sqlite.get(r,{$key:e},(function(e,r){null===e?t(void 0!==r?a.prepareValueForReturn(r.cache_value):void 0):i(new Error(e))}))}))}saveCache(e,t,i=null){return new Promise((async(i,r)=>{if(!this.isConnected())throw new Error("Database connection required");let a,s;a=null!=await this.getCache(e),s=a?`\n            UPDATE ${this.prefix}cache\n            SET cache_key = $cache_key,\n                cache_value = $cache_value\n            WHERE cache_key = $cache_key`:`\n            INSERT INTO ${this.prefix}cache (cache_key, cache_value)\n            VALUES ($cache_key, $cache_value)`;let n=this.prepareValueForInsert(t);this.sqlite.run(s,{$cache_key:e,$cache_value:n},(function(e){null===e?i(!0):r(new Error(e))}))}))}deleteCache(e){return new Promise(((t,i)=>{if(!this.isConnected())throw new Error("Database connection required");let r=`\n          DELETE FROM ${this.prefix}cache\n          WHERE cache_key = $cache_key\n          `,a={$cache_key:e};this.sqlite.run(r,a,(function(e){null===e?t(!0):i(new Error(e))}))}))}deleteImageCache(e="no"){if("yes"!==e)throw new Error('You must type "yes" as the first arguement of db.deleteImageCache()');return!a.existsSync(this.imageCacheDir)||(n.sync(this.imageCacheDir),!a.existsSync(this.imageCacheDir)&&(this.logging&&console.log("Cached artwork deleted"),!0))}getFavorite(e,t){return new Promise(((i,r)=>{if(!this.isConnected())throw new Error("Database connection required");let a=`\n          SELECT * from ${this.prefix}favorites\n          WHERE\n            favorite_thing_id = $thingId\n          AND\n            favorite_thing_type = $thingType`,s={$thingId:e,$thingType:t};this.sqlite.all(a,s,((r,a)=>{if(null!==r)throw r;if(!a.length)return i(null);a.length>1&&console.warn("getFavorite() found duplicate entires for",e,t),i(this.jsonifyValues(a[0]))}))}))}addFavorite(e,t){return new Promise((async(i,r)=>{if(!this.isConnected())throw new Error("Database connection required");let a=await this.getFavorite(e,t);if(a)return console.warn("Trying to add a favorite that already exists. Caller will not know the difference, but this should not happen."),i(a.id);let s=`\n          INSERT INTO ${this.prefix}favorites (favorite_thing_id, favorite_thing_type, favorite_date_added)\n          VALUES ($favorite_thing_id, $favorite_thing_type, $favorite_date_added)`,n={$favorite_thing_id:e,$favorite_thing_type:t,$favorite_date_added:Date.now()};this.sqlite.run(s,n,(function(e){if(null!==e)throw e;i(this.lastID)}))}))}deleteFavorite(e,t){return new Promise((async(i,r)=>{if(!this.isConnected())throw new Error("Database connection required");let a=await this.getFavorite(e,t);if(!a)return console.warn("Trying to delete a favorite that does not exist. Caller will not know the difference, but this should not happen."),i(!0);let s=`\n          DELETE FROM ${this.prefix}favorites\n          WHERE id = $id\n          `,n={$id:a.id};this.sqlite.run(s,n,(function(e){if(null!==e)throw e;i(!0)}))}))}getFile(e){return new Promise(((t,i)=>{if(!this.isConnected())throw new Error("Database connection required");let r;"number"==typeof e?r=`SELECT * from ${this.prefix}file_index WHERE id = $idOrPath`:"string"==typeof e&&(r=`SELECT * from ${this.prefix}file_index WHERE file_path = $idOrPath`);let a={$idOrPath:e};this.sqlite.all(r,a,((i,r)=>{if(null!==i)throw i;if(!r.length)return t(null);r.length>1&&console.warn("getFile() found duplicate entires for",e),t(this.jsonifyValues(r[0]))}))}))}addFile(e){return new Promise((async(t,i)=>{if(!this.isConnected())throw new Error("Database connection required");if("string"!=typeof e)throw new Error("filePath is required for addFile()");let r=await this.getFile(e);if(r)return void console.error("Cannot add file that already exists",r.id);let a=`\n          INSERT INTO ${this.prefix}file_index (file_path, file_extension, file_multimedia_type, file_md5, file_date_updated, file_date_added)\n          VALUES ($file_path, $file_extension, $file_multimedia_type, $file_md5, $file_date_updated, $file_date_added)`,s=e.includes(".")?e.split(".").pop():null,n=this.fileExtensionToMultimediaType(s),o=Date.now(),u={$file_path:e,$file_extension:s,$file_multimedia_type:n,$file_md5:null,$file_date_updated:o,$file_date_added:o};this.sqlite.run(a,u,(function(e){if(null!==e)throw e;this.lastID?t(this.lastID):t(!1)}))}))}deleteFile(e){return new Promise((async(t,i)=>{if(!this.isConnected())throw new Error("Database connection required");let r;"number"==typeof e?r=`DELETE FROM ${this.prefix}file_index WHERE id = $idOrPath`:"string"==typeof e&&(r=`DELETE FROM ${this.prefix}file_index WHERE file_path = $idOrPath`);let a={$idOrPath:e};this.sqlite.run(r,a,(function(e){if(null!==e)throw e;if(0===this.changes)return t(!1);t(!0)}))}))}async countFiles(e){let t;return t=e?await this.get(`SELECT COUNT(*) AS num FROM ${this.prefix}file_index WHERE file_multimedia_type = $type AND file_md5 IS NOT NULL`,{$type:e}):await this.get(`SELECT COUNT(*) AS num FROM ${this.prefix}file_index WHERE file_md5 IS NOT NULL`),t.num}fileExtensionToMultimediaType(e){switch(e){case"mp3":case"flac":case"m4a":case"wav":case"aac":case"opus":return"music";case"mkv":case"mp4":case"mov":return"cinema";case"jpg":case"jpeg":case"png":case"tiff":return"photo"}}}},6412:e=>{e.exports={server:{options:{database_version:"0.0.1",theme:"Lagoon",color_theme:"dark",accent_color:"#3793cf",start_page:"/overview",lang:"en",auto_check_for_updates:0}},client:{options:{database_version:"0.0.1",color_theme:"dark",lang:"en",auto_check_for_updates:0}}}},9110:(e,t)=>{t.register=(e,t,i)=>{console.log("Registering db IPC handlers"),e.handle("sql",(async(e,t)=>{console.info("ipcMain received: sql");try{return i.execute(t)}catch(e){throw e}})),e.handle("get-option",(async(e,t)=>{if(console.info("ipcMain received: get-option"),"string"==typeof t)return await i.getOption(t);let r={};for(let e of t)r[e]=await i.getOption(e);return r})),e.handle("set-option",(async(e,r)=>{console.info("ipcMain received: set-option");let a=r.update||!0,s=await i.getOption(r.option),n=r.value;var o;if(await i.setOption(r.option,r.value,a),o=r.option,r.value,"lang"===o&&t.setAppMenu(),s!==n){let e=null;"userBrowserWindows"in t&&"mainPlayer"in t.userBrowserWindows?e=t.userBrowserWindows.mainPlayer:"browserWindows"in t&&"main"in t.browserWindows&&(e=t.browserWindows.main),e.webContents.send("option-change",{option:r.option,newValue:n,oldValue:s})}})),e.handle("db-api",(async(e,t)=>(console.info(`ipcMain received: db-api; invoked function: ${t.fn}`),await i[t.fn](...t.args))))}},9495:e=>{e.exports={server:{music_tracks:"\n        CREATE TABLE IF NOT EXISTS music_tracks(\n          id INTEGER PRIMARY KEY,\n          track_file_id INTEGER,\n          track_title TEXT,\n          track_plaintext_title TEXT,\n          track_release_id INTEGER,\n          track_num INTEGER,\n          track_disc INTEGER,\n          track_artist_id INTEGER,\n          track_date TEXT,\n          track_date_ms INTEGER,\n          track_duration INTEGER,\n          track_duration_formatted TEXT,\n          track_bitrate INTEGER,\n          track_lossless INTEGER,\n          track_codec TEXT,\n          track_codec_profile TEXT,\n          track_container TEXT,\n          track_num_channels INTEGER,\n          track_source TEXT,\n          track_date_added INTEGER\n        )",music_releases:"\n        CREATE TABLE IF NOT EXISTS music_releases(\n          id INTEGER PRIMARY KEY,\n          release_title TEXT NOT NULL,\n          release_plaintext_title TEXT,\n          release_primary_artist_id INTEGER,\n          release_type TEXT,\n          release_discs INTEGER,\n          release_year INTEGER,\n          release_year_ms INTEGER,\n          release_date_added INTEGER\n        )",music_artists:"\n        CREATE TABLE IF NOT EXISTS music_artists(\n          id INTEGER PRIMARY KEY,\n          artist_name TEXT,\n          artist_plaintext_name TEXT,\n          artist_bio TEXT,\n          artist_photo TEXT,\n          artist_date_added INTEGER\n        )",music_track_meta:"\n        CREATE TABLE IF NOT EXISTS music_track_meta(\n          id INTEGER PRIMARY KEY,\n          meta_object_id INTEGER,\n          meta_key TEXT,\n          meta_value TEXT\n        )",music_release_meta:"\n        CREATE TABLE IF NOT EXISTS music_release_meta(\n          id INTEGER PRIMARY KEY,\n          meta_object_id INTEGER,\n          meta_key TEXT,\n          meta_value TEXT\n        )",music_genres:"\n        CREATE TABLE IF NOT EXISTS music_genres(\n          id INTEGER PRIMARY KEY,\n          genre_name TEXT,\n          genre_description TEXT\n        )",music_playlists:"\n        CREATE TABLE IF NOT EXISTS music_playlists(\n          id INTEGER PRIMARY KEY,\n          playlist_name TEXT,\n          playlist_tags TEXT,\n          playlist_track_ids TEXT\n        )",music_history:"\n        CREATE TABLE IF NOT EXISTS music_history(\n          id INTEGER PRIMARY KEY,\n          music_history_track_id INTEGER,\n          music_history_timestamp INTEGER,\n          music_history_month INTEGER,\n          music_history_day INTEGER,\n          music_history_hours INTEGER,\n          music_history_weather TEXT,\n          music_history_seconds_listened INTEGER,\n          music_history_percent_listened INTEGER,\n          music_history_device INTEGER\n        )",file_index:"\n        CREATE TABLE IF NOT EXISTS file_index(\n          id INTEGER PRIMARY KEY,\n          file_path TEXT,\n          file_extension TEXT,\n          file_multimedia_type TEXT,\n          file_md5 TEXT,\n          file_date_updated INTEGER,\n          file_date_added INTEGER\n        )",directories:"\n        CREATE TABLE IF NOT EXISTS directories(\n          id INTEGER PRIMARY KEY,\n          dir_path TEXT,\n          dir_multimedia_type TEXT,\n          dir_date_added INTEGER\n        )",options:"\n        CREATE TABLE IF NOT EXISTS options(\n          id INTEGER PRIMARY KEY,\n          key TEXT,\n          value TEXT\n        )",cache:"\n        CREATE TABLE IF NOT EXISTS cache(\n          id INTEGER PRIMARY KEY,\n          cache_key TEXT,\n          cache_value TEXT,\n          cache_expires INTEGER\n        )",images:"\n        CREATE TABLE IF NOT EXISTS images(\n          id INTEGER PRIMARY KEY,\n          image_original_location TEXT,\n          image_original_md5 TEXT,\n          image_role TEXT\n        )",image_thumbs:"\n        CREATE TABLE IF NOT EXISTS image_thumbs(\n          id INTEGER PRIMARY KEY,\n          thumb_original_id TEXT,\n          thumb_file TEXT,\n          thumb_width TEXT,\n          thumb_height TEXT\n        )",favorites:"\n        CREATE TABLE IF NOT EXISTS favorites(\n          id INTEGER PRIMARY KEY,\n          favorite_thing_id INTEGER,\n          favorite_thing_type INTEGER,\n          favorite_date_added INTEGER\n        )",users:"\n        CREATE TABLE IF NOT EXISTS users(\n          id INTEGER PRIMARY KEY,\n          provider TEXT,\n          role TEXT,\n          displayname TEXT,\n          token TEXT,\n          refreshtoken TEXT,\n          loggedin INTEGER,\n          lastlogin INTEGER\n        )"},client:{cache:"\n        CREATE TABLE IF NOT EXISTS cache(\n          id INTEGER PRIMARY KEY,\n          cache_key TEXT,\n          cache_value TEXT,\n          cache_expires INTEGER\n        )",options:"\n        CREATE TABLE IF NOT EXISTS options(\n          id INTEGER PRIMARY KEY,\n          key TEXT,\n          value TEXT\n        )",servers:"\n        CREATE TABLE IF NOT EXISTS servers(\n          id INTEGER PRIMARY KEY,\n          server_name TEXT,\n          server_host TEXT,\n          server_port_http INTEGER,\n          server_port_websockets INTEGER,\n          server_first_connected INTEGER,\n          server_last_connected INTEGER\n        )"}}},8771:(e,t,i)=>{e.exports={mainPlayerFactory:i(3629),invisibleWindowFactory:i(9340),infoWindowFactory:i(455),OAuthWindowFactory:i(3201),trayAttachedWindowFactory:i(7592)}},3201:(e,t,i)=>{const{BrowserWindow:r}=i(8933);t.create=async e=>{let t=new r({width:600,height:970,show:!0,parent:e.userBrowserWindows.mainPlayer,webPreferences:{devTools:"source"===process.env.RUN_MODE,nodeIntegration:!0,preload:__dirname+"/preload/OAuth-env.js"}});return await t.loadURL("http://localhost:5000"),console.info("Launched OAuth window"),t.focus(),t.on("closed",(t=>{console.log("OAuth closed"),e.userBrowserWindows.OAuth=null})),t}},455:(e,t,i)=>{const{BrowserWindow:r}=i(8933);t.launch=async(e,t)=>{let i=new r({width:400,height:600,show:!0,webPreferences:{devTools:!0,nodeIntegration:!0}});return e.includes("/")?await i.loadFile(e):await i.loadFile(`./src/public/themes/internal/${e}/index.html`),console.info("Launched info window browserWindow"),i}},9340:(e,t,i)=>{const{BrowserWindow:r}=i(8933);t.create=async(e,t=!1)=>{let i=new r({width:800,height:600,show:t,webPreferences:{devTools:!0,nodeIntegration:!0}});if(t&&i.webContents.openDevTools(),e.includes("/"))await i.loadFile(e);else{let t;if("HYDRA_RUN_MODE"in process.env&&"source"===process.env.HYDRA_RUN_MODE)t="index.html";else{if(!("HYDRA_RUN_MODE"in process.env)||"bundle"!==process.env.HYDRA_RUN_MODE)throw new Error(`Cannot determine which entry file to load for the theme ${e}`);t="bundle.html"}await i.loadFile(`./src/renderer/public/themes/${e}/src/${t}`)}return console.info("Launched invisible browserWindow"),i}},3629:(e,t,i)=>{const{BrowserWindow:r}=i(8933);let a=null,s=null;function n(e,t,i){return clearInterval(s),s=setTimeout((async()=>{let r=i.getPosition(),a=i.getSize();if("win32"===process.platform&&r[0]<0&&r[1]<0&&r[0]===r[1]){let e=Math.abs(0-r[0]);r[0]=0,r[1]=0,a[0]=a[0]-2*e,a[1]=a[1]-2*e}await e.db.setOption(`${t}_window_position`,r),await e.db.setOption(`${t}_window_size`,a)}),100),!0}function o(e){if(null===a)throw new Error("Cannot announce to main player window");a.webContents.send("announcements",e)}t.create=async(e,t)=>{if(void 0===t)throw new Error("A theme name is required");if(a=new r({width:1e3,height:800,minWidth:700,minHeight:400,show:!1,acceptFirstMouse:!0,titleBarStyle:"hiddenInset",backgroundColor:"#272727",frame:!1,resizable:!0,contextIsolation:!1,webPreferences:{defaultFontFamily:"sansSerif",scrollBounce:!1,nodeIntegration:!0}}),await function(e,t,i){return new Promise((async(r,a)=>{let s=await e.db.getOption(`${t}_window_position`),n=await e.db.getOption(`${t}_window_size`);s&&n?(i.setPosition(s[0],s[1],!1),i.setSize(n[0],n[1],!1),r(!0)):r(!1)}))}(e,"main_player",a)||a.maximize(),a.focus(),a.show(),t.includes("/"))await a.loadFile(t);else{let e;if("HYDRA_RUN_MODE"in process.env&&"source"===process.env.HYDRA_RUN_MODE)e="index.html";else{if(!("HYDRA_RUN_MODE"in process.env)||"bundle"!==process.env.HYDRA_RUN_MODE)throw new Error(`Cannot determine which entry file to load for the theme ${t}`);e="bundle.html"}await a.loadFile(`./src/renderer/public/themes/${t}/src/${e}`)}return a.on("move",(()=>{n(e,"main_player",a)})),a.on("resize",(()=>{n(e,"main_player",a)})),a.on("maximize",(()=>{o({action:"maximized"})})),a.on("swipe",((e,t)=>{o({action:"swipe",direction:t})})),a.on("closed",(t=>{e.userBrowserWindows.mainPlayer=null,a=null})),a.webContents.on("new-window",(function(e,t){e.preventDefault()})),console.info("Launched main player window"),a}},7592:(e,t,i)=>{const{BrowserWindow:r}=i(8933);let a=null;t.create=async e=>{if(!("theme"in e))throw new Error("A theme name is required");let t=e.theme,i=30,s=30;if("darwin"===process.platform&&"bounds"in e?(i=e.bounds.x+e.bounds.width/2-160,s=e.bounds.y+30):"win32"===process.platform&&(i=e.bounds.x-160+10,s=e.bounds.y-480-10),a=new r({width:320,height:480,x:i,y:s,show:!0,acceptFirstMouse:!0,backgroundColor:"#272727",frame:!1,resizable:!1,movable:!1,fullscreen:!1,fullscreenable:!1,contextIsolation:!1,alwaysOnTop:!0,skipTaskbar:!0,webPreferences:{defaultFontFamily:"sansSerif",scrollBounce:!1,nodeIntegration:!0}}),a.focus(),a.show(),t.includes("/"))await a.loadFile(t);else{let e;if("HYDRA_RUN_MODE"in process.env&&"source"===process.env.HYDRA_RUN_MODE)e="index.html";else{if(!("HYDRA_RUN_MODE"in process.env)||"bundle"!==process.env.HYDRA_RUN_MODE)throw new Error(`Cannot determine which entry file to load for the theme ${t}`);e="bundle.html"}await a.loadFile(`./src/renderer/public/themes/${t}/src/${e}`)}return a.on("swipe",((e,t)=>{!function(e){if(null===a)throw new Error("Cannot announce to main player window");a.webContents.send("announcements",e)}({action:"swipe",direction:t})})),"onClosed"in e&&a.on("closed",e.onClosed),a.webContents.on("new-window",(function(e,t){e.preventDefault()})),console.info("Launched tray attached window"),a}},7082:(e,t,i)=>{e.exports={en:i(1797),fr:i(6644),ipc:i(8608),httpRoutes:i(3032),string:(e,t="en")=>i(5169)(`./${t}.js`)[e]||e}},3032:(e,t,i)=>{t.register=e=>{e.get("/api/i18n",(async(e,t)=>({en:i(1797),fr:i(6644)})))}},8608:(e,t,i)=>{t.register=e=>{console.log("Registering db IPC handlers"),e.handle("get-i18n",(async(e,t)=>(console.info("ipcMain received: get-i18n"),{en:i(1797),fr:i(6644)})))}},1797:e=>{e.exports={"unit-test-string":"English","aria.label.albums.controls.order-by":"Reorder your albums","aria.label.artists.controls.order-by":"Reorder your artists","aria.label.tracks.controls.order-by":"Reorder your songs","aria.label.ui-listbox.remove-list-item":"Removes the item from this list",artist:"Artist",artists:"Artists",album:"Album",albums:"Albums",track:"Track",tracks:"Tracks",genre:"Genre",genres:"Genres",playlist:"Playlist",playlists:"Playlists","app-name":"Cardinal",cardinalserver:"Cardinal Server","cardinalserver-short":"Server",cardinalmusic:"Cardinal Music","cardinalmusic-short":"Music",close:"Close",save:"Save",reset:"Reset",continue:"Continue",cancel:"Cancel",quit:"Quit",menu:"Menu",disc:"Disc","choose-file":"Choose file",or:"or",of:"of","source-icon.local.title":"This song comes from a file on your computer","danger-confirm":"Are you sure? This cannot be undone.","toggle-favorite":"Add/remove from favorites","play-count":"Play count","no-content":"No content",year:"Year",play:"Play",version:"Version","music-app.context-menu.group-name":"Cardinal","music-app.context-menu.settings":"Settings","system-menu.about":"About Cardinal","system-menu.close-window":"Close Window","system-menu.check-for-updates":"Check for updates...","system-menu.back":"Back","system-menu.forward":"Forward","system-menu.settings":"Settings","system-menu.quit":"Quit Cardinal","system-menu.top-level.file":"File","system-menu.top-level.view":"View","system-menu.top-level.playback":"Playback","system-menu.top-level.help":"Help","system-menu.toggle-play-pause":"Toggle Play/Pause","system-menu.play":"Play","system-menu.pause":"Pause","system-menu.stop":"Stop","system-menu.next":"Next","system-menu.previous":"Previous","system-menu.macos.hide":"Hide","system-menu.macos.unhide":"Unhide","system-menu.reset-zoom":"Reset Zoom","system-menu.zoom-in":"Zoom In","system-menu.zoom-out":"Zoom Out","system-menu.toggle-dev-tools":"Developer Tools","system-menu.top-level.window":"Window","system-menu.minimize":"Minimize","system-menu.toggle-queue":"Toggle Queue","system-menu.show-welcome":"Show Welcome Message","system-menu.learn-more":"Learn More","system-menu.website":"Cardinal Website","system-menu.attributions":"Attributions","system-menu.open-source":"Open Source","system-menu.terms-and-conditions":"Terms and Conditions","system-menu.privacy-policy":"Privacy Policy","system-menu.cut":"Cut","system-menu.copy":"Copy","system-menu.paste":"Paste","system-menu.select-all":"Select All","system-menu.full-screen":"Full Screen","system-menu.reload":"Reload","system-menu.front":"Front","system-menu.window":"Window","server-connect.form-title":"Connect to a Cardinal Server","server-connect.form-field.host":"Host","server-connect.form-field.port":"Port","server-connect.form-submit":"Connect","server-connect.logo-title":"Chrip chirp","server-connect.help-c2a":"How do I connect?","server-connect.help-body":'\n                                                                          <p>To use this app, you must have <a href="https://cardinalapps.xyz/cardinal-server" class="external">Cardinal Server</a> running somewhere on your local area network.</p>\n                                                                          <p>Once the server is running, the location information can be found in the server\'s <strong>Status</strong> widget, and it will look something like:</p>\n                                                                          <code>192.168.0.0:0000</code>\n                                                                          <p>The <strong>Host</strong> is the part to the left of the colon, usually it\'s an IP address.</p>\n                                                                          <p>The <strong>Port</strong> is the part to the right of the colon, it\'s a number with up to 5 digits.</p>\n                                                                          <p>The server that you connect to must continue running while using this app.</p>\n                                                                          ',"server-connect.connection-failed":"Server connection failed.<br>Is the server running on the local area network?","server-connect.autoconnect-failed":"Could not automatically reconnect to Cardinal Server.","updater.ask-to-update.title":"Update available","updater.ask-to-update.msg":"Would you like to update now? The app will restart.\n\n","updater.ask-to-update.btn.yes":"Update Now","updater.ask-to-update.btn.no":"Later","updater.no-updates.title":"No update available","updater.no-updates.message":"No update available.\n\nYou already have the latest version.","context-menu.inspect-element":"Inspect Element","context-menu.toggle-dev-tools":"Developer Tools","media-keys-need-permission.notification.title":"Permission Required","media-keys-need-permission.notification.message":"<p>Cardinal needs permission to use the media keys on your keyboard.</p><p>Restart the app after granting permission.</p>","notification.cannot-load-music-file.message":"Could not play song.\n\n{{song}}\n\nContinue to next song?","search-bar.placeholder":"Name, title, year","search-bar.context-menu.clear-history":"Clear Search Histroy","search.group-title.tracks":"Songs","search.group-title.musicReleases":"Releases","search.group-title.artists":"Artists","search.group-title.genres":"Genres","search.group-title.playlists":"Playlists","search.no-results":"No results","nav.music.explore":"Explore Music","nav.music.title":"Music Library","nav.music.artists":"Artists","nav.music.releases":"Releases","nav.music.tracks":"Songs","nav.music.genres":"Genres","nav.music.playlists":"Playlists","nav.cinema.home-cinema":"Home Cinema","nav.cinema.title":"Tv & Movies","nav.cinema.tv":"TV","nav.cinema.movies":"Movies","nav.cinema.genres":"Genres","nav.cinema.channels":"Channels","playlists.smart-playlist.top-songs.title":"Your Top Songs","playlists.smart-playlist.recently-added.title":"Recently Added","settings.main-dot-menu":"Settings","settings.context-menu":"Settings","settings.main-title":"Settings","settings.tab-name-general":"General","settings.tab-name-music-playback":"Music Playback","settings.tab-name-window":"Window","settings.tab-name-theme":"Theme","settings.tab-name-updates":"Updates","settings.tab-name-advanced":"Advanced","settings.language.title":"Language","settings.confirm-electron-quit":"Confirm before quitting","settings.local-files.title":"Files on my Computer","settings.local-files.instructions":"Drag n' drop folders into the box to add them to your media.","settings.local-files.importer-msg":"New folders will automatically be imported after the settings are closed.","settings.local-files.remove-folder-tooltip-message":"Cardinal won't check this folder anymore when refreshing the library","settings.local-files.folder-structure-guide-opener":"Recommended folder structure","settings.online-accounts.title":"Cloud Music","settings.online-accounts.instructions":"Optionally log into a cloud music service","settings.online-accounts.spotify-login-with":"Log into your Spotify account","settings.online-accounts.applemusic-login-with":"Log in with your Apple ID","settings.online-accounts.googleplaymusic-login-with":"Log in with your Google account","settings.online-accounts.logged-in-as":"Logged in as {{name}}","settings.online-accounts.logout":"Log out","settings.factory-reset.title":"Factory Reset","settings.factory-reset.desc":"Reset everything","settings.factory-reset.confirm":"This will reset only this Cardinal app, making it like it was just installed. \n\nNothing on the server will be effected, including playback history. To remove server data, use the server app.\n","settings.color-theme.title":"Colour Theme","settings.color-theme.option.light":"Light (beta)","settings.color-theme.option.dark":"Dark","settings.accent-color.title":"Accent Colour","settings.notifications.title":"Notifications","settings.notifications.song-change-label":"When the song changes","settings.music-playback.title":"Music Playback Options","settings.music-playback.always-load-whole-song":"Always load the whole song before playing it. This will add a significant delay when loading a new song, but will prevent intermittent buffering when files are being retrieved over a slow network connection.","settings.custom-css.title":"Custom CSS","settings.custom-css.notice":"Notice","settings.custom-css.instructions":"If you break something, press <code class='inline win32-only'>Ctrl+Alt+I</code><code class='inline darwin-only'>Cmd+Option+I</code> and run <code class='inline'>disableCustomCSS()</code> in the console.","settings.developer.title":"Developer","settings.developer.enable-label":"Enable Developer Mode","settings.start-page.title":"Start Page","settings.updates.title":"Updates","settings.updates.auto-check-label":"Automatically check for updates","settings.updates.manual-check-label":"Check now","settings.window.title":"Behaviour","settings.window.autoclose-on-blur":"Automatically close the window when focus is lost","playback-controls.waveform-error-message":"Waveform not available","breadcrumbs.explore":"Explore","breadcrumbs.music-library":"Music Library","breadcrumbs.artist":"Artist","breadcrumbs.album":"Album","breadcrumbs.music-release":"Release","breadcrumbs.genres":"Genres","breadcrumbs.genre":"Genre","breadcrumbs.playlists":"Playlists","breadcrumbs.playlist":"Playlist","view.artists.title":"Artists","view.artist.favorite-tracks.title":"Favorite Songs","view.artist.most-played.title":"Most Played Songs","view.artist.release-type.albums":"Albums","view.artist.release-type.singles":"Singles","view.artist.release-type.eps":"EPs","view.artist.release-type.compilations":"Compilations","view.artist.release-type.soundtrack":"Soundtracks","view.artist.release-type.live":"Live","view.artist.release-type.remix":"Remixes","view.artist.release-type.other":"Other Releases","view.artist.similar-artists.title":"Similar Artists","view.empty-message":"Add music","view.albums.title":"Albums","view.albums.control-group-filter-title":"Filter","view.albums.control-group-filter-option-genre":"Genre","view.albums.control-group.order.title":"Order","view.albums.control-group.order.option.name":"Name","view.albums.control-group.order.option.year":"Year","view.albums.control-group.name-asc.aria-assertive-change-message":"Albums sorted by name in ascending order","view.albums.control-group.name-desc.aria-assertive-change-message":"Albums sorted by name in descending order","view.albums.control-group.year-asc.aria-assertive-change-message":"Albums sorted by year in ascending order","view.albums.control-group.year-desc.aria-assertive-change-message":"Albums sorted by year in descending order","view.artists.control-group.name-asc.aria-assertive-change-message":"Artists sorted by name in ascending order","view.artists.control-group.name-desc.aria-assertive-change-message":"Artists sorted by name in descending order","control-group.cycle-button.name-asc-desc":"Order by name","control-group.cycle-button.year-asc-desc":"Order by year","control-group.asc":"Ascending","control-group.desc":"Descending","view.album.artist.prefix":"By ","view.album.song-count":"{{n}} songs","view.album.related.title":"Albums by ","view.tracks.title":"Songs","view.genres.title":"Genres","view.genre.artist-grid-title":"{{genre}} Artists","view.genre.album-grid-title":"{{genre}} Albums","genre-tag.context-menu.edit-genre":"Edit Genre","view.playlists.title":"Playlists","view.playlist.artists-in-playlist-title":"Artists in this Playlist","view.playlist.albums-in-playlist-title":"Albums in this Playlist","view.playlist.tracks-in-playlist-title":"Songs in this Playlist","view.playlist.play-button-c2a":"Play","track-list.empty-playlist":"Empty Playlist","track-table.playlist-stats.tracks":"{{n}} <sub>songs</sub>","track-table.playlist-stats.tracks-singular":"{{n}} <sub>song</sub>","track-block.context-menu.play-track":"Play Song","track-block.context-menu.play-next":"Play Song Next","track-block.context-menu.add-to-queue":"Add Song to Queue","track-block.context-menu.add-to-playlist":"Add Song to Playlist","track-block.context-menu.edit-track":"Edit Song","track-block.context-menu.remove-from-playlist":"Remove from Playlist","artist-block.context-menu.shuffle-artist":"Shuffle Artist","artist-block.context-menu.edit-artist":"Edit Artist","album-block.context-menu.group-name":"Album","album-block.context-menu.play-album":"Play Album","album-block.context-menu.play-next":"Play Album Next","album-block.context-menu.add-to-queue":"Add Album to Queue","album-block.context-menu.add-to-playlist":"Add Album to Playlist","album-block.context-menu.edit-album":"Edit Album","release-metadata.artist":"Artist","release-metadata.year":"Released","release-metadata.average-bitrate":"Average Bitrate","release-metadata.file-type":"Filetype","release-metadata.file-types":"Filetypes","release-metadata.duration":"Duration","playlist-list.empty-message":"Create Playlist","playlist-list.form.create.button-title":"Create new Playlist","playlist-list.form.create.name-label":"Name","playlist-list.form.create.submit-button":"Create","playlist-block.context-menu.play":"Play Playlist","playlist-block.context-menu.play-next":"Play Playlist Next","playlist-block.context-menu.add-to-queue":"Add Playlist to Queue","playlist-block.context-menu.delete-playlist":"Delete Playlist","playlist-block.context-menu.edit-playlist":"Edit Playlist","playlist-block.track-count.suffix":"songs","playlist-block.track-count.suffix-singular":"song","queue.title":"Up Next","queue.shuffling-title":"Shuffling","queue.num-in-queue":"{{n}} items","queue.num-in-queue-singular":"{{n}} item","queue.btn.delete":"Empty","queue.empty-message":"There's nothing coming up next","queue.context-menu.group-name":"Queue","queue.context-menu.remove-from-queue":"Remove from Queue","view.explore.title":"Explore My Music","open-source.title":"Open Source Software","open-source.first-party":'<p>These open source libraries were developed for Cardinal:</p>\n                                                                          <ul>\n                                                                            <li><a href="http://github.com/somebeaver/Lowrider.js" class="external">Lowrider.js</a></li>\n                                                                            <li><a href="http://github.com/somebeaver/double-u" class="external">double-u</a></li>\n                                                                            <li><a href="http://github.com/somebeaver/Bridge.js" class="external">Bridge.js</a></li>\n                                                                            <li><a href="http://github.com/somebeaver/Boogietime.js" class="external">Boogietime.js</a></li>\n                                                                            <li><a href="http://github.com/somebeaver/sqleary.js" class="external">sqleary.js</a></li>\n                                                                            <li><a href="http://github.com/somebeaver/router.js" class="external">router.js</a></li>\n                                                                            <li><a href="http://github.com/somebeaver/html.js" class="external">html.js</a></li>\n                                                                            <li><a href="http://github.com/somebeaver/cardinal-indexing-service" class="external">cardinal-indexing-service</a></li>\n                                                                          </ul>',"open-source.third-party":'<p>Cardinal relies on these third party open source projects:</p>\n                                                                          <ul>\n                                                                            <li><a href="https://www.electronjs.org/" class="external">Electron</a></li>\n                                                                            <li><a href="https://www.npmjs.com/package/sqlite3" class="external">sqlite3</a></li>\n                                                                            <li><a href="https://www.fastify.io/" class="external">Fastify</a></li>\n                                                                            <li><a href="https://www.npmjs.com/package/ws" class="external">ws.js</a></li>\n                                                                            <li><a href="https://www.npmjs.com/package/sharp" class="external">sharp</a></li>\n                                                                            <li><a href="https://www.npmjs.com/package/webpack" class="external">webpack</a></li>\n                                                                            <li><a href="https://github.com/electron-userland/electron-builder" class="external">electron-builder</a></li>\n                                                                            <li><a href="https://github.com/electron/electron-notarize" class="external">electron-notarize</a></li>\n                                                                            <li><a href="https://howlerjs.com/" class="external">Howler.js</a></li>\n                                                                            <li><a href="https://swiperjs.com/" class="external">Swiper</a></li>\n                                                                            <li><a href="https://www.npmjs.com/package/music-metadata" class="external">music-metadata</a></li>\n                                                                            <li><a href="https://www.npmjs.com/package/ip" class="external">IP</a></li>\n                                                                            <li><a href="https://www.npmjs.com/package/fast-glob" class="external">fast-glob</a></li>\n                                                                            <li><a href="https://www.npmjs.com/package/md5-file" class="external">md5-file</a></li>\n                                                                            <li><a href="https://www.npmjs.com/package/dotenv" class="external">dotenv</a></li>\n                                                                            <li><a href="https://www.npmjs.com/package/humanize-duration" class="external">humanize-duration</a></li>\n                                                                            <li><a href="https://github.com/cowboy/javascript-route-matcher" class="external">javascript-route-matcher</a></li>\n                                                                            <li><a href="https://node-tap.org/" class="external">node-tap</a></li>\n                                                                          </ul>',"open-source.fonts":'<p>And these fonts:</p>\n                                                                          <ul>\n                                                                            <li><a href="https://fonts.google.com/specimen/Open+Sans" class="external">Open Sans</a></li>\n                                                                            <li><a href="https://fonts.google.com/specimen/Yantramanav" class="external">Yantramanav</a></li>\n                                                                            <li><a href="https://fontawesome.com/" class="external">Font Awesome</a></li>\n                                                                          </ul>',"about.body":'<p>Cardinal is designed and developed by <a href="https://github.com/somebeaver" class="external">somebeaver 🌴</a></p>\n                                                                          <p>Get involved with the project on <a href="https://github.com/somebeaver/cardinal-project" class="external">Github</a> and <a href="https://old.reddit.com/r/cardinalapps/" class="external">Reddit</a></p>',"folder-structure-guide.title":"Folder Structure Guide","folder-structure-guide.desc-before-examples":"<p><strong>When importing files, Cardinal will always prioritize the embedded file metadata that exists.</strong></ul>\n                                                                           <p>However, when metadata is missing, Cardinal will try to fill in the missing information using the surrounding folders and files.</p>\n                                                                           <p>For the best import results, adhere to these folder structures.</p>","folder-structure-guide.example.music.title":"Music files","folder-structure-guide.example.music.code.artist":"Artist Name","folder-structure-guide.example.music.code.album":"Album Name","folder-structure-guide.example.music.code.disc":"Disc 01 (or CD 01)","folder-structure-guide.example.music.code.song":"01 - Song name.mp3","folder-structure-guide.example.music.code.cover-art":"cover.jpg","folder-structure-guide.supported-types.title":"Supported File Types","folder-structure-guide.supported-types.music-files":"Music files","folder-structure-guide.supported-types.artwork":"Album art","metadata-editor.editing-artist.title":"Editing Artist","metadata-editor.editing-album.title":"Editing Album","metadata-editor.editing-track.title":"Editing Song","metadata-editor.editing-playlist.title":"Editing Playlist","metadata-editor.editing-genre.title":"Editing Genre","metadata-editor.toggle-switch.also-update-file-metadata":"Also update file metadata","metadata-editor.toggle-switch.merge-should-overwrite":"Overwrite target when merging","metadata-editor.toggle-switch.merge-should-overwrite-tooltip":"When updating metadata makes two things merge (artists, movies, whatever), this determines if the values in this form will overwrite the other values.","metadata-editor.api-update-failed":"The update did not work","metadata-editor.date.day":"Day","metadata-editor.date.month":"Month","metadata-editor.date.year":"Year","metadata-editor.total-discs-label":"Of","metadata-editor.genres":"Genres","metadata-editor.smart-fill-guess.tooltip":"While importing, Cardinal gusssed this value because the file was missing the appropriate metadata.","metadata-editor.merge-warning-message":"This edit will merge two {{things}}.","metadata-editor.merge-warning-detail":'If you rename "{{thingA}}" to "{{thingB}}", they will be merged into just "{{thingB}}". Do you want to do this?',"metadata-editor.cannot-edit-currently-playing-song-warning":"You cannot edit the currently playing song.","column.artist_name":"Artist","column.artist_bio":"Biography","column.artist_photo":"Photo","column.artist_date_added":"Added","column.release_title":"Album","column.release_year":"Year","column.release_artwork":"Artwork","column.track_title":"Title","column.track_date":"Year","column.track_num":"Track #","column.track_disc":"Disc","column.track_path":"Path","column.track_duration":"Duration","column.track_duration_formatted":"Duration","column.track_file_type":"File Type","column.track_bitrate":"Bitrate","column.track_codec":"Codec","column.track_container":"Container","column.track_lossless":"Lossless","column.track_path":"File","column.track_source":"Source","column.playlist_name":"Name","column.playlist_tags":"Tags","column.genre_name":"Name","media-feed.waiting-for-import-to-finish":"Waiting for import to finish, have a look around","media-feed.building-feed":"Looking things up","media-feed.not-enough-music":"Music exploration requires at least 10 albums","media-feed.settings-button":"Balance","media-feed.shuffle-music.title":"Play Something Good","media-feed.random-album.title":"Play a Random Album","media-feed.shuffle-artist.title":"Play songs From a<br>Random Artist","media-feed.shuffle-music-genre.title":"Play Songs From a<br>Random Genre","media-feed.end":"That's all folks!","media-feed-block.top-tracks.title":"Top Tracks","media-feed-block.recently-played-music.title":"Recently Played","media-feed-block.recently-played-music.no-content":"Play some music and it'll appear here","media-feed-block.recently-added-music.title":"Recently Added","media-feed-block.albums-with-favorites.title":"Albums With Favorites","media-feed-block.albums-with-favorites.no-content":"Add songs to your favorites and their albums will appear here","media-feed-block.artist.top-albums-title":"Most Played Albums","media-feed-block.artist.top-tracks-title":"Most Played Songs","media-feed-block.artist.random-albums-title":"A Few Random Albums","media-feed-block.artist.random-tracks-title":"A Few Random Songs","media-feed-block.top-picks.title.default":"Music for right now","media-feed-block.top-picks.title.overnight-1":"Late night tunes","media-feed-block.top-picks.title.overnight-2":"Music for tonight","media-feed-block.top-picks.title.overnight-3":"Keeping it going","media-feed-block.top-picks.title.overnight-4":"For the night owls","media-feed-block.top-picks.title.overnight-5":"Staying awake","media-feed-block.top-picks.title.morning-1":"Starting the day","media-feed-block.top-picks.title.morning-2":"Morning vibes","media-feed-block.top-picks.title.morning-3":"Getting the day started","media-feed-block.top-picks.title.morning-4":"Morning mood","media-feed-block.top-picks.title.morning-5":"Lets do this","media-feed-block.top-picks.title.afternoon-1":"Afternoon audio","media-feed-block.top-picks.title.afternoon-2":"Midday music","media-feed-block.top-picks.title.afternoon-3":"Peak energy","media-feed-block.top-picks.title.afternoon-4":"Feel the afternoon","media-feed-block.top-picks.title.afternoon-5":"Keep killing it","media-feed-block.top-picks.title.evening-1":"Evening energy","media-feed-block.top-picks.title.evening-2":"Just what you need","media-feed-block.top-picks.title.evening-3":"Winding down","media-feed-block.top-picks.title.evening-4":"For the moment","media-feed-block.top-picks.title.evening-5":"For this evening","server.app-name":"Cardinal Server","server.location":"Location","server.uptime":"Uptime","server.quit-warning-title":"Quit Confirmation","server.quit-warning-body":"Cardinal Server must be running for other Cardinal apps to use your media. Are you sure you want to quit?","server.nav.overview":"Overview","server.nav.indexer":"Index","server.nav.connected-devices":"Devices","server.nav.settings":"Settings","server.overview.title":"Overview","server.status.title":"Status","server.status.online":"Server is online","server.status.offline":"Server is offline","server.status.connecting":"Connecting...","server.status.loading":"Loading...","server.actions.title":"Actions","server.actions.shut-down":"Shut down","server.indexer.title":"File Index","server.index-controls.state.internal-error":"The indexing service encountered an internal error. This is heartbreaking. 😭","server.index-controls.title":"Controls","server.index-controls.state.starting":"Starting...","server.index-controls.state.scanning":"Scanning...","server.index-controls.scanned-count":"Found {{n}} files","server.index-controls.state.syncing":"Syncing index...","server.index-controls.syncing-message":"Comparing items...","server.index-controls.added-file-to-index":"Added","server.index-controls.removed-file-from-index":"Removed","server.index-controls.state.importing":"Indexing...","server.index-controls.imported-file":"Indexed","server.index-controls.updated-file":"Updated","server.index-controls.skipped-file":"Skipped","server.index-controls.errored-file":"Errored","server.index-controls.calculating-time-remaining":"Calculating time...","server.index-controls.importing-time-remaining":"{{time}} left","server.index-controls.importing-time-remaining-almost-done":"Almost done...","server.index-controls.state.paused":"Paused","server.index-controls.state.finished":"Indexing Complete","server.index-summary.new-files":"New files","server.index-summary.new-files-explanation":"Files that were first seen on this indexing run.","server.index-summary.updated-files":"Updated files","server.index-summary.updated-files-explanation":"Files that changed since the last time they were indexed.","server.index-summary.skipped-files":"Skipped files","server.index-summary.skipped-files-explanation":"Files that haven't changed since the last time they were indexed, and were therefore skipped.","server.index-summary.deleted-files":"Deleted files","server.index-summary.deleted-files-explanation":"Files that were once indexed, but now no longer exist, and were therefore removed from the index.","server.index-summary.errored-files":"Errored files","server.index-summary.errored-files-explanation":"Files that produced an error while attempting to process their data.","server.index-summary.view-report":"View Report","server.index-options.mode.name":"Mode","server.index-options.mode.desc":"Quick mode will only add new files and remove deleted files from the index. Deep mode will also check for updated file metadata.","server.index-options.mode.opts":"Options","server.index-options.mode.opt.quick":"Quick","server.index-options.mode.opt.deep":"Deep","server.index-stats.title":"Indexed Files","server.index-stats.music-files":"Music files","server.index-stats.cinema-files":"Movies & TV files","server.index-stats.photo-files":"Photo files","server.index-stats.book-files":"Book files","server.index-directories.title":"My Folders","server.index-directories.subtitle":"Drag n' drop folders into the box to add them to your media","server.index-directories.remove-dir-title":"Removing a folder does not remove its media until the next indexing run.","server.index-directories.load-error":"Couldn't load directories.","server.index-directories.no-dirs-warning":"You currently have indexed files, but now have no folders. If allowed to run, this operation will deindex all your files. Are you sure you want to continue?","server.connected-devices.title":"Connected Devices","server.connected-devices.no-devices":"No other Cardinal apps are using the server.","server.connected-devices.state.playing":"Playing","server.connected-devices.state.paused":"Paused","server.connected-devices.state.stopped":"Not Playing","server.connected-devices.method.reference-name":"Reference","server.connected-devices.method.reference-desc":'"Reference" playback is when the server tells the client app where the media file is located, and the client plays it on its own.',"server.connected-devices.method.stream-name":"Streaming","server.connected-devices.method.stream-desc":"The server is reading the media file and streaming the data to the client.","server.connected-device.server.meta":"This is the UI that you are using right now.","server.settings.title":"Server Settings","server.apps.title":"Apps","server.apps.help.title":"Using Client Apps","server.apps.help":'<p>The Server includes web apps that can be used by browsers on your desktop, tablet, and smartphone.</p>\n                                                                           <p>There are also native installers for macOS and Windows available on the <a href="https://cardinalapps.xyz" class="external">Cardinal website</a>.</p>',"server.apps.help.locations.title":"Web App Locations","server.apps.help.location.music.prefix":"<strong>Music</strong>"}},6644:e=>{e.exports={"unit-test-string":"French","aria.label.explore-nav":"Pages principales","aria.label.collection-nav":"Ma collection","aria.label.playlists-nav":"Playlists","aria.label.genres-nav":"Genres","aria.label.albums.controls.order-by":"Réarranger mes albums","aria.label.artists.controls.order-by":"Réarranger mes artistes","aria.label.tracks.controls.order-by":"Réarranger mes chansons","aria.label.ui-listbox.remove-list-item":"Enlever cet item de la liste",close:"Fermer",menu:"Menu",disc:"Disque","source-icon.local.title":"Cette chanson provient d'un fichier sur ton ordinateur","danger-confirm":"Es-tu certain? Ceci est irréversible.","fullsize-app.main-dot-menu.group-name":"Echoes","system-menu.macos.about":"A propos d'Echoes","system-menu.close-window":"Fermer la fenêtre","system-menu.check-for-updates":"Vérifier pour une mise à jour...","system-menu.forward":"Prochain","system-menu.back":"Précédent","system-menu.settings":"Parametres","system-menu.quit":"Quitter","system-menu.top-level.file":"Fichier","system-menu.top-level.view":"Aperçu","system-menu.top-level.playback":"Playback","system-menu.toggle-play-pause":"Alterner jouer/pause","system-menu.play":"Jouer","system-menu.pause":"Pause","system-menu.stop":"Arrêt","system-menu.next":"Prochain","system-menu.previous":"Précédent","system-menu.macos.hide":"Cacher","system-menu.macos.unhide":"Montrer","system-menu.reset-zoom":"Réinitialiser le zoom","system-menu.zoom-in":"Zoomer","system-menu.zoom-out":"Dézoomer","system-menu.toggle-dev-tools":"Outils de développeur","system-menu.top-level.window":"Fenétre","system-menu.minimize":"Minimniser","system-menu.toggle-queue":"Voir/cacher les chansons suivantes","system-menu.show-welcome":"Afficher la fenêtre de bienvenue","updater.ask-to-update.title":"Mise à jour disponible","updater.ask-to-update.msg":"Veux-tu faire la mise à jour? L'application va redémarrer.","updater.ask-to-update.btn.yes":"Faire la mise à jour","updater.ask-to-update.btn.no":"Plus tard","updater.no-updates.title":"Pas de mise à jour disponible","updater.no-updates.message":"Pas de mise à jour disponible.\n\nTu as déjà la dernière version.","context-menu.special-item.label.add-to-playlist":"Ajouter à la liste de lecture","context-menu.inspect-element":"Inspecter l'element","context-menu.toggle-dev-tools":"Outils de développeur","media-keys-need-permission.notification.title":"Permission requise","media-keys-need-permission.notification.message":"<p>Echoes a besion de ta permission pour utiliser les touches media sur ton clavier.</p><p>Redemarrer l'application après avoir donner l'autorisation.</p>","notification.cannot-load-music-file.title":"Fichier non trouvé","notification.cannot-load-music-file.message":"<p>Echoes ne trouve pas le fichier de la chanson «{{song}}». Il a peut-être été supprimé ou qu'il se trouve sur un lecteur externe qui n'est plus accessible.</p>","search-bar.placeholder":"Nom, titre, année","search-bar.context-menu.clear-history":"Effacer l'historique","search.group-title.tracks":"Chansons","search.group-title.albums":"Albums","search.group-title.artists":"Artistes","search.group-title.genres":"Genres","search.group-title.playlists":"Listes de lecture","search.no-results":"Aucun résultat","nav.explore.title":"Explorer","nav.collection.title":"Collection","nav.collection.artists":"Artistes","nav.collection.albums":"Albums","nav.collection.tracks":"Chansons","nav.collection.genres":"Genres","nav.genres.title":"Genres","nav.genres.all-genres":"Tous les genres","nav.playlists.title":"Listes de lecture","nav.playlists.all-playlists":"Toutes les listes","playlists.smart-playlist.top-songs.title":"Tes chansons populaires","playlists.smart-playlist.recently-added.title":"Ajoutées dernièrement","settings.main-dot-menu":"Paramètres","settings.context-menu":"Paramètres","settings.main-title":"Paramètres","settings.tab-name-general":"Général","settings.tab-name-sources":"Musique","settings.tab-name-theme":"Thème","settings.language.title":"Language","settings.local-files.title":"Fichiers sur mon ordinateur","settings.local-files.instructions":"Glisser-déposer des dossiers dans la boîte pour les ajouter à ma collection","settings.local-files.importer-msg":"Les nouveaux dossiers vont être importés automatiquement lorsque les paramètres seront fermés","settings.local-files.remove-folder-tooltip-message":"Echoes ne vérifiera plus ce dossier pour de nouveaux fichiers","settings.online-accounts.title":"Musique en streaming","settings.online-accounts.instructions":"Se connecter à un service de streaming","settings.online-accounts.spotify-login-with":"Me connecter avec Spotify","settings.online-accounts.applemusic-login-with":"Me connecter avec mon Apple ID","settings.online-accounts.googleplaymusic-login-with":"Me connecter avec mon compte Google","settings.online-accounts.logged-in-as":"Connecté en tant que {{name}}","settings.online-accounts.logout":"Déconnexion","settings.factory-reset":"Réinitialiser l'application","settings.factory-reset.confirm":"Ceci effacra tous les données d'Echoes.\n\nLes fichiers de musique sur ton ordinateur ne seront pas touchés.\n","importer.status.no-music":"Ajouter de la musique","importer.status.scanning-local":"Analyse du dossier...","importer.status.import-done":"Importation fini","importer.announcer.processing-n-files":"Traitement {{n}} de {{total}}","importer.announcer.imported-file":"Importé : {{file}}","importer.announcer.skipped-file":"Ignoré : {{file}}","importer.main-dot-menu.manual-local-import":"Actualiser mes fichiers","breadcrumbs.explore":"Explorer","breadcrumbs.collection":"Collection","breadcrumbs.album":"Album","breadcrumbs.artist":"Artiste","breadcrumbs.genres":"Genres","breadcrumbs.genre":"Genre","breadcrumbs.playlists":"Listes de lecture","breadcrumbs.playlist":"Liste de lecture","view.artists.title":"Artistes","view.artist.favorite-tracks.title":"Chansons préférées","view.artist.top-tracks.title":"Meilleures chansons","view.artist.albums.title":"Albums","view.artist.similar-artists.title":"Artistes similaires","view.empty-message":"Ajouter de la musique","view.albums.title":"Albums","view.albums.control-group-filter-title":"Filtres","view.albums.control-group-filter-option-genre":"Genre","view.albums.control-group.order.title":"Ordre","view.albums.control-group.order.option.name":"Nom","view.albums.control-group.order.option.year":"Année","view.albums.control-group.name-asc.aria-assertive-change-message":"Albums triés par nom dans l'ordre croissant","view.albums.control-group.name-desc.aria-assertive-change-message":"Albums triés par nom dans l'ordre décroissant","view.albums.control-group.year-asc.aria-assertive-change-message":"Albums triés par année dans l'ordre croissant","view.albums.control-group.year-desc.aria-assertive-change-message":"Albums triés par année dans l'ordre décroissant","view.artists.control-group.name-asc.aria-assertive-change-message":"Artistes triés par nom dans l'ordre croissant","view.artists.control-group.name-desc.aria-assertive-change-message":"Artistes triés par nom dans l'ordre décroissant","control-group.cycle-button.name-asc-desc":"Trier par nom","control-group.cycle-button.year-asc-desc":"Trier par année","control-group.asc":"En ordre croissant","control-group.desc":"En order décroissant","view.album.artist.prefix":"Par ","view.album.song-count":"{{n}} chansons","view.album.related.title":"Albums par ","view.tracks.title":"Chansons","view.genres.title":"Genres","view.genre.artist-grid-title":"Artistes {{genre}}","view.genre.album-grid-title":"Albums {{genre}}","view.playlists.title":"Listes de lecture","view.playlist.artists-in-playlist-title":"Artistes","view.playlist.albums-in-playlist-title":"Albums","view.playlist.tracks-in-playlist-title":"Chansons","view.playlist.play-button-c2a":"Jouer","track-table.col-name.album_title":"Album","track-table.col-name.artist_name":"Artiste","track-table.col-name.bitrate":"Bitrate","track-table.col-name.codec":"Codec","track-table.col-name.container":"Conteneur","track-table.col-name.date":"Date","track-table.col-name.dateadded":"Ajouté","track-table.col-name.durationformatted":"Durée","track-table.col-name.filetype":"Type de fichier","track-table.col-name.genre":"Genre","track-table.col-name.lossless":"Lossless","track-table.col-name.path":"Fichier","track-table.col-name.source":"Source","track-table.col-name.title":"Titre","track-table.col-name.track_num":"No.","track-table.playlist-stats.tracks":"{{n}} <sub>pistes</sub>","track-list.empty-playlist":"Liste de lecture vide","track-block.context-menu.play-next":"Jouer ensuite","track-block.context-menu.add-to-queue":"Ajouter à la file","track-block.context-menu.remove-from-playlist":"Enlever de la liste de lecture","album-block.context-menu.group-name":"Album","album-block.context-menu.play-album":"Jouer l'album","album-block.context-menu.play-next":"Jouer l'album suivant","album-block.context-menu.add-to-queue":"Ajouter l'album à la file","playlist-list.empty-message":"Créer une liste le lecture","playlist-list.form.create.button-title":"Créer une liste le lecture","playlist-list.form.create.name-label":"Nom","playlist-list.form.create.submit-button":"Créer","playlist-block.context-menu.group-name":"Liste de lecture","playlist-block.context-menu.play":"Jouer la liste de lecture","playlist-block.context-menu.play-next":"Jouer la liste de lecture suivant","playlist-block.context-menu.add-to-queue":"Ajouter la liste de lecture à la file","playlist-block.context-menu.delete-playlist":"Supprimer la liste de lecture","playlist-block.track-count.suffix":"chansons","playlist-block.track-count.suffix-singular":"chanson","queue.title":"Suivant","queue.shuffling-title":"Mode aléatoire","queue.num-in-queue":"{{n}} items","queue.num-in-queue-singular":"{{n}} item","queue.btn.delete":"Vide","queue.empty-message":"Il n'y a rien à venir","queue.context-menu.group-name":"File","queue.context-menu.remove-from-queue":"Enlever de la file"}},5169:(e,t,i)=>{var r={"./en.js":1797,"./fr.js":6644};function a(e){var t=s(e);return i(t)}function s(e){if(!i.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=s,e.exports=a,a.id=5169},5079:(e,t,i)=>{e.exports={IndexingService:i(1467),ipc:i(2867),httpRoutes:i(8289)}},1467:(e,t,i)=>{const r=i(5747),a=i(5622),s=i(7710),n=i(2732),o=i(2101);e.exports=class{constructor(e){if(this._setState("NOTREADY"),!("db"in e))throw new Error("IndexingService requires options.db");this.options={mode:"quick",dirs:[],outputDir:void 0,filetypes:["mp3","flac","m4a","wav","aac","opus"],logging:!1,reportDir:!1,callbacks:{},...e},this.mode=this.options.mode,this.startTime=null,this.endTime=null,this.masterList=[],this.numFilesToProcessThisRun=null,this.deletedFiles=[],this.addedFiles=[],this.importedFiles=[],this.updatedFiles=[],this.skippedFiles=[],this.erroredFiles=[],this.paused=!1,this.currentlyIndexingFile=null,this.currentlyIndexingFileNum=0,this.rollingImportTimes=[],this.maxRollingImportTimes=24,this.lastImportTime=0,this._dbRowOffset=0,this.ensureCacheDirExists(),this._setState("READY")}_log(...e){this.options.logging&&console.log(...e)}_setState(e){switch(e){case"NOTREADY":this.state=e,this.running=!1;break;case"READY":this.state=e,this.running=!1,this._log(`State set to ${e}`);break;case"SCANNING":case"SYNCING":case"IMPORTING":this.state=e,this.running=!0,this._log(`State set to ${e}`);break;case"DONE":this.state=e,this.running=!1,this._log(`State set to ${e}`);break;default:throw new Error(`Trying to set invalid state "${e}"`)}}_triggerCb(e,...t){e in this.options.callbacks&&this.options.callbacks[e](this,...t)}ensureCacheDirExists(){if(this.options.outputDir)return r.existsSync(this.options.outputDir)||r.mkdirSync(this.options.outputDir),!0}async begin(){if(this.running||"READY"!==this.state)return this._triggerCb("cantBegin",new Error("Importer is already running")),void console.warn("Cannot start indexing while already indexing");this._triggerCb("begun");let e=await this.scan();if("READY"!==this.state||!0!==e)throw new Error("IndexingService stuck in scan state");let t=await this.sync();if("READY"!==this.state||!0!==t)throw new Error("IndexingService stuck in sync state");if(await this.import(),"DONE"!==this.state)throw new Error("IndexingService stuck in import state");return!0}pause(){this.paused?this._log("Cannot pause() IndexingService while it's already paused. No action was taken."):"IMPORTING"===this.state?this.paused=!0:console.warn("Cannot pause() IndexingService when it's not in the IMPORTING state. No action was taken.")}resume(){this.paused?"IMPORTING"===this.state?(this.paused=!1,this._importLoop()):console.warn("Cannot resume() IndexingService when it's not in the IMPORTING state. No action was taken."):console.warn("Cannot resume() IndexingService while it's already running. No action was taken.")}async scan(e={}){if("READY"!==this.state)throw new Error("Cannot start scan unless state is READY");if(this.running)throw new Error("Cannot start scan while instance is already running");if(this.masterList.length)throw new Error("Cannot rescan once the masterList contains file paths");this.startTime||(this.startTime=Date.now());let t="dirs"in e?e.dirs:this.options.dirs,i="filetypes"in e?e.filetypes:this.options.filetypes;if(!t.length)return!0;this._setState("SCANNING");for(let e of t){this._log("Beginning scan of directory",e);let t=s.stream([`**/*.{${i.join(",")}}`],{cwd:e});for await(let i of t){let t=a.join(e,i);this.masterList.push(t),this._triggerCb("scanFoundFile",t),this._log("Scanner found",t)}this._log("Scanner finished scanning directory",e)}return this._log(`Scan completed. Found ${this.masterList.length} files with the extensions (${this.options.filetypes.join(",")}).`),this._setState("READY"),this._triggerCb("scanDone"),!0}async sync(){if("READY"!==this.state)throw new Error("Cannot start sync unless state is READY");if(this.running)throw new Error("Cannot start sync while instance is already running");if(this._setState("SYNCING"),!await this._sync_removeDeletedFiles())throw new Error("Something went wrong when deleting indexed data during sync");if(!await this._sync_addNewFiles())throw new Error("Something went wrong when adding indexed file paths during sync");return this._setState("READY"),this._triggerCb("syncDone"),!0}async _sync_removeDeletedFiles(){let e=this.options.db;if(0===(await e.all(`SELECT COUNT(*) AS num_files FROM ${e.prefix}file_index`))[0].num_files)return!0;let t=await e.all(`SELECT * FROM ${e.prefix}file_index`);for(let e of t)this.masterList.includes(e.file_path)||await this._sync_removeFile(e);return!0}async _sync_removeFile(e){let t;this._triggerCb("beforeFileSync",e.file_path);try{switch(e.file_multimedia_type){case"music":t=await o.deindexFile(this.options.db,e.file_path);break;case"photo":console.log("TODO")}}catch(e){throw e}return t&&this.deletedFiles.push(e.file_path),this._log("Deleted file and its meta from index",e.file_path),this._triggerCb("syncDeletedFileFromIndex",e.file_path),this._triggerCb("afterFileSync",e.file_path),!!t}async _sync_addNewFiles(){if(!this.masterList.length)return!0;for(let e of this.masterList)null===await this.options.db.getFile(e)&&await this._sync_addFile(e);return!0}async _sync_addFile(e){this._log("Adding path to database file index",e),this._triggerCb("beforeFileSync",e);let t=await this.options.db.addFile(e);return t||console.error("Problem adding file",e),t&&this.addedFiles.push(e),this._triggerCb("syncAddedFileToIndex",e),this._triggerCb("afterFileSync",e),!!t}async import(){if("READY"!==this.state)throw new Error("Cannot start import unless state is READY");if(this.running)throw new Error("Cannot start import while instance is already running");this._setState("IMPORTING");let e=this.options.db;if(0===(await e.all(`SELECT COUNT(*) AS num_files FROM ${e.prefix}file_index`))[0].num_files)return await this._done(),!0;if(null===this.numFilesToProcessThisRun){let t=await e.all(`SELECT COUNT(*) AS num_files FROM ${e.prefix}file_index`);this.numFilesToProcessThisRun=t[0].num_files}return this._triggerCb("beforeImport",{totalFilesToProcess:this.numFilesToProcessThisRun}),await this._importLoop()}_importLoop(){return new Promise((async(e,t)=>{if("IMPORTING"!==this.state)throw new Error("Cannot run import loop unless state is IMPORTING");this._triggerCb("importLoopRunning");const i=this.options.db;let r=!0;for(;!this.paused&&r;){this._fileTimeStart();let t=await i.all(`\n            SELECT * \n            FROM ${i.prefix}file_index\n            LIMIT 1\n            OFFSET ${this._dbRowOffset}`);if(t.length>1)throw new Error("Too many results");if(!t.length)return r=!1,this._triggerCb("importDone"),await this._done(),e(!0);this._dbRowOffset++;let a,s=t[0];if(this.currentlyIndexingFile=s.file_path,this.currentlyIndexingFileNum++,this._triggerCb("beforeFileImport",s.file_path),"quick"===this.mode)a=s.file_md5;else if("deep"===this.mode)try{a=await n(s.file_path)}catch(e){this.erroredFiles.push(s.file_path),this._triggerCb("fileErrored",s.file_path);continue}s.file_md5?a!==s.file_md5?await this._importLoop_updatedFile(s):a===s.file_md5&&await this._importLoop_skippedFile(s):await this._importLoop_newFile(s),this._fileTimeEnd(),this._triggerCb("afterFileImport")}}))}async _importLoop_newFile(e){let t;try{switch(e.file_multimedia_type){case"music":t=await o.indexFile(this.options.db,e.file_path,this.options.outputDir);break;case"photo":console.log("TODO")}}catch(e){throw e}return t?(this.importedFiles.push(e.file_path),this._log("File imported",e.file_path),this._triggerCb("fileImported",e.file_path)):(this.erroredFiles.push(e.file_path),this._log("File errored",e.file_path),this._triggerCb("fileErrored",e.file_path)),!!t}async _importLoop_updatedFile(e){let t;try{switch(e.file_multimedia_type){case"music":t=await o.updateFile(this.options.db,e.file_path,this.options.outputDir);break;case"photo":console.log("TODO")}}catch(e){throw e}return t?(this.updatedFiles.push(e.file_path),this._log("File updated",e.file_path),this._triggerCb("fileUpdated",e.file_path)):(this.erroredFiles.push(e.file_path),this._log("File errored",e.file_path),this._triggerCb("fileErrored",e.file_path)),!!t}async _importLoop_skippedFile(e){return this.skippedFiles.push(e.file_path),this._log("Skipping file",e.file_path),this._triggerCb("fileSkipped",e.file_path),!0}_fileTimeStart(){this._lastFileTimeStartMs=Date.now()}_fileTimeEnd(){this.lastImportTime=Date.now()-this._lastFileTimeStartMs,this.rollingImportTimes.unshift(this.lastImportTime),this.rollingImportTimes=this.rollingImportTimes.slice(0,this.maxRollingImportTimes),console.log("Average time:",this.getAverageTime()),console.log("Time remaining:",this.getTimeRemaining()),console.log("Percentage Completed:",this.getPercentageCompleted()+"%")}async _done(){this.currentlyIndexingFile=null,this.currentlyIndexingFileNum=0,this.endTime=Date.now(),await this.createReport(),this._setState("DONE"),this._triggerCb("done",this)}getAverageTime(){return this.rollingImportTimes.length>1?Math.round(this.rollingImportTimes.reduce(((e,t)=>(e+t)/2))):this.rollingImportTimes[0]}getTimeRemaining(){if(!this.masterList.length)throw new Error("This should not trigger without a masterList");let e=this.masterList.length-this.currentlyIndexingFileNum;return this.getAverageTime()*e}getPercentageCompleted(){return Math.round(this.currentlyIndexingFileNum/this.masterList.length*100)}async createReport(){if(this.options.reportDir)return this._log("Creating report"),this.report=`# IndexingService Summary Report\n### Cardinal Server - [cardinalapps.xyz](https://cardinalapps.xyz)\n##### Run started: ${new Date(this.startTime).toString()}\n##### Run finished: ${new Date(this.endTime).toString()}\n##### Total time: ${(this.endTime-this.startTime)/1e3} seconds\n##### Mode: ${this.mode}\n##### Filetypes: ${this.options.filetypes.join(" ")}\n##### Directories: ${this.options.dirs.join("<br>")}\n##### Report Directory: ${this.options.reportDir}\n\n### Table of Contents:\n- [All Matched Files](#all-matched-files)\n- [All New Files](#all-new-files)\n- [All Updated Files](#all-updated-files)\n- [All Skipped Files](#all-skipped-files)\n- [All Deleted Files](#all-deleted-files)\n- [All Errored Files](#all-errored-files)\n\n## All Matched Files\n#### This is the master list of files that the service found on the disk. Each one gets imported, updated, skipped, or deleted (from the Cardinal database, not the disk).\n$ ${this.masterList.join("<br>  $ ")||"(none)"}\n\n## All New Files\n#### These files were newly imported on this indexing run.\n$ ${this.importedFiles.join("<br> $ ")||"(none)"}\n\n## All Updated Files\n#### These files were found to have new metadata and have been updated. The indexing mode must be "deep" for anything to appear here.\n$ ${this.updatedFiles.join("<br> $ ")||"(none)"}\n\n## All Skipped Files\n#### These files were skipped because they have already been imported, and they did not have new metadata.\n$ ${this.skippedFiles.join("<br> $ ")||"(none)"}\n\n## All Deleted Files\n#### These files were once imported but are either no longer on the local disk, or their folder is no longer being indexed. They were removed from the database.\n$ ${this.deletedFiles.join("<br> $ ")||"(none)"}\n\n## All Errored Files\n#### These files produced an error when trying to work with them.\n$ ${this.erroredFiles.join("<br> $ ")||"(none)"}\n\nEND OF REPORT`,console.log("Saving report"),await new Promise((e=>{r.existsSync(this.options.reportDir)||r.mkdirSync(this.options.reportDir),this.reportFile=a.join(this.options.reportDir,`IndexingReport-${Date.now()}.md`),r.writeFile(this.reportFile,this.report,(t=>t?(console.log("Report saving failed"),e(!0)):(console.log("Report saved successfully"),e(!1))))}))}}},1965:(e,t)=>{const i=[{base:"A",letters:/[\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F]/g},{base:"AA",letters:/[\uA732]/g},{base:"AE",letters:/[\u00C6\u01FC\u01E2]/g},{base:"AO",letters:/[\uA734]/g},{base:"AU",letters:/[\uA736]/g},{base:"AV",letters:/[\uA738\uA73A]/g},{base:"AY",letters:/[\uA73C]/g},{base:"B",letters:/[\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181]/g},{base:"C",letters:/[\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E]/g},{base:"D",letters:/[\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779]/g},{base:"DZ",letters:/[\u01F1\u01C4]/g},{base:"Dz",letters:/[\u01F2\u01C5]/g},{base:"E",letters:/[\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E]/g},{base:"F",letters:/[\u0046\u24BB\uFF26\u1E1E\u0191\uA77B]/g},{base:"G",letters:/[\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E]/g},{base:"H",letters:/[\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D]/g},{base:"I",letters:/[\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197]/g},{base:"J",letters:/[\u004A\u24BF\uFF2A\u0134\u0248]/g},{base:"K",letters:/[\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2]/g},{base:"L",letters:/[\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780]/g},{base:"LJ",letters:/[\u01C7]/g},{base:"Lj",letters:/[\u01C8]/g},{base:"M",letters:/[\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C]/g},{base:"N",letters:/[\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4]/g},{base:"NJ",letters:/[\u01CA]/g},{base:"Nj",letters:/[\u01CB]/g},{base:"O",letters:/[\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C]/g},{base:"OI",letters:/[\u01A2]/g},{base:"OO",letters:/[\uA74E]/g},{base:"OU",letters:/[\u0222]/g},{base:"P",letters:/[\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754]/g},{base:"Q",letters:/[\u0051\u24C6\uFF31\uA756\uA758\u024A]/g},{base:"R",letters:/[\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782]/g},{base:"S",letters:/[\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784]/g},{base:"T",letters:/[\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786]/g},{base:"TZ",letters:/[\uA728]/g},{base:"U",letters:/[\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244]/g},{base:"V",letters:/[\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245]/g},{base:"VY",letters:/[\uA760]/g},{base:"W",letters:/[\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72]/g},{base:"X",letters:/[\u0058\u24CD\uFF38\u1E8A\u1E8C]/g},{base:"Y",letters:/[\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE]/g},{base:"Z",letters:/[\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762]/g},{base:"a",letters:/[\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250]/g},{base:"aa",letters:/[\uA733]/g},{base:"ae",letters:/[\u00E6\u01FD\u01E3]/g},{base:"ao",letters:/[\uA735]/g},{base:"au",letters:/[\uA737]/g},{base:"av",letters:/[\uA739\uA73B]/g},{base:"ay",letters:/[\uA73D]/g},{base:"b",letters:/[\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253]/g},{base:"c",letters:/[\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184]/g},{base:"d",letters:/[\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A]/g},{base:"dz",letters:/[\u01F3\u01C6]/g},{base:"e",letters:/[\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD]/g},{base:"f",letters:/[\u0066\u24D5\uFF46\u1E1F\u0192\uA77C]/g},{base:"g",letters:/[\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F]/g},{base:"h",letters:/[\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265]/g},{base:"hv",letters:/[\u0195]/g},{base:"i",letters:/[\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131]/g},{base:"j",letters:/[\u006A\u24D9\uFF4A\u0135\u01F0\u0249]/g},{base:"k",letters:/[\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3]/g},{base:"l",letters:/[\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747]/g},{base:"lj",letters:/[\u01C9]/g},{base:"m",letters:/[\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F]/g},{base:"n",letters:/[\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5]/g},{base:"nj",letters:/[\u01CC]/g},{base:"o",letters:/[\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275]/g},{base:"oi",letters:/[\u01A3]/g},{base:"ou",letters:/[\u0223]/g},{base:"oo",letters:/[\uA74F]/g},{base:"p",letters:/[\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755]/g},{base:"q",letters:/[\u0071\u24E0\uFF51\u024B\uA757\uA759]/g},{base:"r",letters:/[\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783]/g},{base:"s",letters:/[\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B]/g},{base:"t",letters:/[\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787]/g},{base:"tz",letters:/[\uA729]/g},{base:"u",letters:/[\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289]/g},{base:"v",letters:/[\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C]/g},{base:"vy",letters:/[\uA761]/g},{base:"w",letters:/[\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73]/g},{base:"x",letters:/[\u0078\u24E7\uFF58\u1E8B\u1E8D]/g},{base:"y",letters:/[\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF]/g},{base:"z",letters:/[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763]/g}];t.formatPlaintextName=e=>{if(!e)return"";for(let t=0;t<i.length;t++)e=e.replace(i[t].letters,i[t].base);return e},t.formatDuration=e=>{if(!e)return 0;let t=new Date(null);t.setSeconds(e);let i=t.toISOString().substr(11,8);return"00:"===i.substr(0,3)&&(i=i.slice(3)),"0"===i.substr(0,1)&&(i=i.slice(1)),i}},8289:(e,t)=>{t.register=(e,t)=>{e.get("/api/indexing-service/stats",(async(e,i)=>({music:await t.countFiles("music"),photos:0,cinema:0,books:0})))}},7131:function(e,t,i){const r=i(5747),a=i(5622),s=i(6417);t.findAdjacentArtwork=(e,t)=>{switch(t){case"music":return this._findMusicArtwork(e)}},t._findMusicArtwork=e=>{let t=["jpg","jpeg","png","gif","bmp","tiff"],i=[],s=e.split(a.sep).slice(0,-1).join(a.sep),n=r.readdirSync(s);for(let e of n){let r=e.split(".").pop().toLowerCase();t.includes(r)&&i.push(a.join(s,e))}return!!i.length&&i},t.embeddedBufferToImageFile=(e,t)=>new Promise(((i,n)=>{r.existsSync(e)||r.mkdirSync(e);let o=t.format.split("/").pop(),u=s.randomBytes(24).toString("hex"),l=a.join(e,u+"."+o);r.writeFile(l,Buffer.from(t.data.data),((e,t,r)=>{if(e)throw e;i(l)}))}))},2867:(e,t,i)=>{t.register=async(e,t,r)=>{const{invisibleWindowFactory:a}=i(8771);console.log("Registering IndexingService IPC handlers");let s=null,n=null;e.handle("IndexingService:Begin",(async(i,o)=>{if(console.log("ipcMain received: IndexingService:Begin"),null!==s)return console.warn("Refusing to create IndexingService process because one is already running"),void(null!==r.browserWindows.main&&r.browserWindows.main.webContents.send("IndexingService:Announcements","ALREADYRUNNING"));try{s=await a.create("IndexingService");let i=function(t,a){console.log(a),"CLOSEWINDOW"===a&&(e.removeListener("IndexingService:OutputPipe",i),s.close(),n=null,s=null),"object"==typeof a&&(n=a),null!==r.browserWindows.main&&r.browserWindows.main.webContents.send("IndexingService:Announcements",a)};e.on("IndexingService:OutputPipe",i),s.send("begin",{systemDir:t.getPath("appData"),beginOpts:o,...process.env})}catch(e){return!1}return!0})),e.handle("IndexingService:Pause",(async()=>{if(null!==s)return s.send("pause"),!0;console.warn("Cannot pause IndexingService when one is not even running.")})),e.handle("IndexingService:Resume",(async()=>{if(null!==s)return s.send("resume"),!0;console.warn("Cannot resume IndexingService when one is not even running.")})),e.handle("IndexingService:GetState",(()=>new Promise(((t,i)=>{let r={lastIndexingAnnouncement:n,paused:!1};if(null===s)return t(r);e.once("isPaused-reply",((e,i)=>{r.paused=i,t(r)})),s.send("isPaused")}))))}},3164:function(e,t,i){const r=i(5622),a=i(2732),s=i(4222),{mediaCrud:n}=i(7587),{findAdjacentArtwork:o,embeddedBufferToImageFile:u}=i(7131),{formatPlaintextName:l,formatDuration:c}=i(1965),{smartFillMeta:d}=i(7132);t.fallbackString="(Unknown)",t.importFile=async(e,t,i)=>{let r=await this.getFileMeta(t);if(!r)return!1;let s,u=await e.getFile(t);r.track.track_file_id=u.id;let l,c=await n.getArtist(e,r.artist.artist_name);if(s=c?c.id:(await n.createArtist(e,r.artist)).id,!s)throw new Error(`Something went wrong with artist entity for ${t}`);r.artist.id=s,r.release.release_primary_artist_id=s,r.track.track_artist_id=s;let d=await n.getMusicRelease(e,r.release.release_title,r.release.release_primary_artist_id);if(l=d?d[0].id:await n.createMusicRelease(e,r.release,[{artist:r._raw.common.artists}]),r.release.id=l,r.track.track_release_id=l,!l)throw new Error(`Something went wrong with release entity for ${t}`);let m=await n.createTrack(e,r.track);if(!m)throw new Error(`Something went wrong with track entity for ${t}`);r.track.id=m.id;let p=o(t,"music"),h=!0;if(p){h=!1;for(let t of p)if(!await this.cacheAdjacentArtwork(e,l,t,i,m.id))throw new Error(`Something went wrong when caching the file ${t}`)}if(!await this.saveMetaRows(e,r,h,i,l))throw new Error(`Something went wrong with track entity for ${t}`);if(!await this.saveMetaGenres(e,r))throw new Error(`Something went wrong with genres for ${t}`);let g=await a(t);try{await e.update("file_index",u.id,{file_md5:g})}catch(e){throw new Error("Could not update file MD5 after indexing file")}return u.id},t.getFileMeta=async e=>{let t;try{t=await s.parseFile(e)}catch(e){return console.warn(e),resolve(null)}if(!("duration"in t.format))try{t=await s.parseFile(e,{duration:!0})}catch(e){return console.warn(e),resolve(null)}let i,r=d(e,t,this.fallbackString),a=null;a=r.common.date?r.common.date:r.common.originaldate?r.common.originaldate:r.common.year,i=r.common.releasetype?r.common.releasetype[0]:"album";let n=this.fallbackString;r.common.albumartist?n=r.common.albumartist:Array.isArray(r.common.artists)&&r.common.artists.length?n=r.common.artists[0]:r.common.artist&&(n=r.common.artist);let o=r.common.genre||null;return Array.isArray(o)&&(o=o.filter((e=>"string"==typeof e&&""!==e.trim()))),{artist:{artist_name:n,artist_plaintext_name:l(n),artist_bio:null,artist_photo:null,artist_date_added:Date.now()},release:{release_title:r.common.album,release_plaintext_title:l(r.common.album),release_primary_artist_id:null,release_type:i,release_discs:r.common.disk.of,release_year:r.common.year,release_year_ms:Date.parse(r.common.year),release_date_added:Date.now()},track:{track_file_id:null,track_title:r.common.title,track_plaintext_title:l(r.common.title),track_release_id:null,track_num:r.common.track.no,track_disc:r.common.disk.no,track_genre_ids:null,track_artist_id:null,track_artist_ids:null,track_date:a,track_date_ms:Date.parse(a),track_duration:r.format.duration,track_duration_formatted:c(r.format.duration),track_bitrate:r.format.bitrate||null,track_lossless:r.format.lossless||null,track_codec:r.format.codec||null,track_codec_profile:r.format.codecProfile||null,trackcontainer:r.format.container||null,track_num_channels:r.format.channels||null,track_source:"local",track_date_added:Date.now()},genre:o,_raw:{common:r.common,format:r.format},_guesses:r.guesses}},t.cacheAdjacentArtwork=async(e,t,i,a,s)=>{if(!a)return console.warn("Cannot cache file because IndexingService is missing the outputDir option"),!1;let o=i.split(r.sep).pop().split(".").shift().toLowerCase(),u=await n.cacheImage(e,i,a,o);return await n.updateMeta(e,"music_track",s,"artwork",u.id),await n.updateMeta(e,"music_release",t,"artwork",u.id),u.id||!1},t.saveMetaRows=async(e,t,i,a,s)=>{let o=t.track.id,l={...t._raw.common,...t._raw.format},c=["duration","genre"];i||c.push("picture");try{for(let[i,d]of Object.entries(l))if(!c.includes(i))if("picture"!==i)await n.addMeta(e,"music_track",o,i,d);else{Array.isArray(d)||(d=[d]);for(let i of d){let l=await u(r.join(a,"embedded-artwork"),i);if(!l)throw new Error(`Could not create file for embedded artwork of ${t.track.track_title}`);let c=`embedded-${i.type||"unknown"}`,d=await n.cacheImage(e,l,a,c);await n.addMeta(e,"music_track",o,"artwork",d.id),await n.updateMeta(e,"music_release",s,"artwork",d.id)}}}catch(e){throw e}return!0},t.saveMetaGenres=async(e,t)=>{if(!t.genre)return!0;let i=t.track.id,r=[];if(Array.isArray(t.genre))r.push(...t.genre);else{if("string"!=typeof t.genre)throw new Error("Genres are something other than an array or string");r.push(t.genre)}for(let e in r)if(r[e].includes(",")){let t=r[e];r.splice(e,1),t.split(",").map((e=>e.trim())).forEach((e=>r.push(e)))}try{for(let t of r){let r,a=await n.getGenre(e,t);if(r=a?a.id:(await n.createGenre(e,{genre_name:t,genre_description:null})).id,!await n.addMeta(e,"music_track",i,"genre",r))throw new Error("Error saving meta genre row for",i)}}catch(e){throw e}return!0}},2101:(e,t,i)=>{e.exports={indexFile:i(3164).importFile,updateFile:i(2758).D,deindexFile:i(3587).deindexFile,smartFillMeta:i(7132).smartFillMeta}},3587:function(e,t,i){const{mediaCrud:r}=i(7587);t.deindexFile=async(e,t,i=!0)=>{let a=await e.getFile(t);if(!a)throw new Error("File path does not exist");if(!a.file_md5)return!i||await this.deleteFromIndex(e,t);let s=await r.getTrack(e,a.id,!0);if(!s)throw new Error(`Could not find track for file ${t}`);if(!await this.maybeDeleteCachedImages(e,s))throw new Error(`Error deleted cached images while deleting file ${t}`);if(!await this.deleteTrack(e,s.id))throw new Error("Could not delete track for file",t);if(!await this.maybeDeleteRelease(e,s))throw new Error(`Error handling release during deletion for file ${t}`);if(!await this.maybeDeleteArtist(e,s))throw new Error(`Error handling artist during deletion for file ${t}`);if(!await this.maybeDeleteGenres(e,s))throw new Error(`Error handling genres during deletion for file ${t}`);if(!await this.deleteMeta(e,s))throw new Error(`Error deleting meta during deletion for file ${t}`);if(!await this.removeFromFavorites(e,s))throw new Error(`Error removing items from favorites while deleting file ${t}`);return!i||await this.deleteFromIndex(e,t)},t.deleteFromIndex=async(e,t)=>await e.deleteFile(t),t.deleteTrack=async(e,t)=>await e.deleteRow("music_tracks",t),t.deleteMeta=async(e,t)=>await e.all(`\n      DELETE FROM ${e.prefix}music_track_meta\n      WHERE meta_object_id = $id`,{$id:t.id}),t.maybeDeleteCachedImages=async(e,t)=>{let i=await r.getMeta(e,"music_track",t.id,"artwork");if(!i)return!0;Array.isArray(i)||(i=[i]);for(let a of i)(await e.all(`\n        SELECT * FROM ${e.prefix}music_track_meta\n        WHERE meta_object_id != $trackId\n        AND meta_key = 'artwork'\n        AND meta_value = $artworkId\n        LIMIT 1`,{$trackId:t.id,$artworkId:a})).length||await r.deleteCachedImage(e,a);return!0},t.maybeDeleteRelease=async(e,t)=>{if((await e.all(`\n      SELECT * FROM ${e.prefix}music_tracks\n      WHERE track_release_id = ${t.track_release_id}\n      AND track_title != $title\n      LIMIT 1`,{$title:t.track_title})).length)return!0;let i=await r.getMusicRelease(e,t.track_release_id,t.track_artist_id);if(!i)throw new Error(`Could not find release for file ${filePath}`);return await r.deleteMusicRelease(e,i[0].id)},t.maybeDeleteArtist=async(e,t)=>{if((await e.all(`\n      SELECT * FROM ${e.prefix}music_tracks\n      WHERE track_artist_id = ${t.track_artist_id}\n      AND track_title != $title\n      LIMIT 1`,{$title:t.track_title})).length)return!0;let i=await r.getArtist(e,t.track_artist_id);if(!i)throw new Error(`Could not find artist for file ${filePath}`);return await e.deleteRow("music_artists",i.id)},t.maybeDeleteGenres=async(e,t)=>{let i=await r.getMeta(e,"music_track",t.id,"genre");if(!i)return!0;Array.isArray(i)||(i=[i]);for(let r of i)if(!(await e.all(`\n        SELECT * FROM ${e.prefix}music_track_meta\n        WHERE meta_key = 'genre'\n        AND meta_value = $genreId\n        AND meta_object_id != $trackId\n        LIMIT 1`,{$genreId:r,$trackId:t.id})).length&&!await e.deleteRow("music_genres",r))throw new Error(`Error deleting genre ${r}`);return!0},t.removeFromFavorites=async(e,t)=>{let i=await r.getFavoriteOfType(e,t.id,"track");return i&&await r.removeFavorite(e,i.id),!0}},7132:function(e,t,i){const r=i(5622);t.smartFillMeta=(e,t,i)=>{if(!e)throw new Error("filePath is required");if(!t)throw new Error("metadata is required");let r=JSON.parse(JSON.stringify(t)),a={};if(!("title"in r.common)||!r.common.title){let t=this.guessTitle(e);a.title=t,r.common.title=t}if(!("album"in r.common)||!r.common.album){let t=this.guessAlbum(e,i);a.album=t,r.common.album=t}if(!("artist"in r.common)||!r.common.artist){let t=this.guessArtist(e,i);a.artist=t,r.common.artist=t}if(!r.common.track.no){let t=this.guessTrackNum(e);a.track_no=t,r.common.track.no=t}return Object.keys(a).length?r.guesses=a:r.guesses=!1,r},t.findDiscDir=e=>{if(!e)throw new Error("filePath is required");const t=e.split(r.sep).slice(-2,-1)[0];return(/cd[ .-]?\d+/gi.exec(t)||!!/disc[ .-]?\d+/gi.exec(t))&&t},t.guessTitle=e=>{if(!e)throw new Error("filePath is required");let t=e.split(r.sep).pop();if(t.includes(".")){let e=t.split(".");return e.pop(),e.join(".")}return t},t.guessAlbum=(e,t)=>{if(!e)throw new Error("filePath is required");const i=e.split(r.sep).slice(-2,-1)[0],a=e.split(r.sep).slice(-3,-2)[0];return this.findDiscDir(e)?a||t||"":i||t||""},t.guessArtist=(e,t)=>{if(!e)throw new Error("filePath is required");const i=e.split(r.sep).slice(-3,-2)[0],a=e.split(r.sep).slice(-4,-3)[0];return this.findDiscDir(e)?a||t||"":i||t||""},t.guessTrackNum=e=>{if(!e)throw new Error("filePath is required");let t=e.split(r.sep).pop();if(!/^\d+[ .-]+\w+/gm.exec(t))return 0;let i=/^[0-9|-]+/gim.exec(t)[0];return"-"===i[i.length-1]&&(i=i.substr(0,i.length-1)),i.includes("-")?parseInt(i.split("-").pop()):parseInt(i)}},2758:(e,t,i)=>{const{mediaCrud:r}=i(7587),{importFile:a}=i(3164),{deindexFile:s}=i(3587);t.D=async(e,t,i)=>{let n=await e.getFile(t);if(!n)throw new Error("File path does not exist");let o=await r.getTrack(e,n.id,!0);try{await s(e,t,!1)}catch(e){throw e}try{if(!await e.updateRow("file_index",n.id,{file_md5:null,file_date_updated:Date.now()}))throw new Error(`Something wen't wrong when updating file row ${n.file_path}`)}catch(e){throw e}try{if(!await a(e,t,i))throw new Error(`Something wen't wrong when reimporting file row ${n.file_path}`);let s=await r.getTrack(e,n.id,!0);if(!await e.updateRow("music_tracks",s.id,{id:o.id}))throw new Error(`Something wen't wrong when slotting in updated track row for ${n.file_path}`);let u=await e.all(`\n        SELECT * FROM ${e.prefix}music_track_meta\n        WHERE meta_object_id = $id`,{$id:s.id});if(!u.length)return console.warn("Track did not have any meta, this should not happen during testing"),!0;for(let t of u)if(!await e.updateRow("music_track_meta",t.id,{meta_object_id:o.id}))throw new Error(`Something wen't wrong when updating track meta for for ${n.file_path}`)}catch(e){throw e}return!0}},7587:(e,t,i)=>{e.exports={mediaCrud:i(7514),artistCrud:i(3269),directoryCrud:i(5287),favoriteCrud:i(5019),feedCrud:i(2188),genreCrud:i(6320),historyCrud:i(1658),imageCrud:i(3547),metaCrud:i(5092),musicReleaseCrud:i(2934),playlistCrud:i(5580),trackCrud:i(9774),search:i(6252)}},3269:function(e,t,i){const r=i(5622),{formatPlaintextName:a}=i(816);t.createArtist=(e,t)=>new Promise((async(i,r)=>{if(!e.isConnected())throw new Error("Database connection required");let a=`\n        INSERT INTO ${e.prefix}music_artists (artist_name, artist_plaintext_name, artist_bio, artist_photo, artist_date_added)\n        VALUES ($artist_name, $artist_plaintext_name, $artist_bio, $artist_photo, $artist_date_added)\n        `,s={$artist_name:t.artist_name,$artist_plaintext_name:t.artist_plaintext_name,$artist_bio:null,$artist_photo:null,$artist_date_added:t.artist_date_added};e.sqlite.run(a,s,(function(e){if(null!==e)throw e;this.lastID?i({id:this.lastID,...t}):i(!1)}))})),t.getArtist=(e,t)=>new Promise(((i,r)=>{if(!e.isConnected())throw new Error("Database connection required");let a=null;switch(typeof t){case"string":a=`SELECT * FROM ${e.prefix}music_artists WHERE artist_name = $value`;break;case"number":a=`SELECT * FROM ${e.prefix}music_artists WHERE id = $value`}null===a&&r(new Error("getArtist() expects a string or integer")),e.sqlite.get(a,{$value:t},((t,a)=>{null!==t&&r(new Error(t)),void 0===a&&i(null),i(e.jsonifyValues(a))}))})),t.getAllArtists=e=>new Promise(((t,i)=>{if(!e.isConnected())throw new Error("Database connection required");let r=`SELECT * FROM ${e.prefix}music_artists`;e.sqlite.all(r,[],((r,a)=>{null!==r&&i(new Error(r)),t(e.jsonifyValues(a))}))})),t.deleteArtist=(e,t)=>new Promise(((i,r)=>{if(!e.isConnected())throw new Error("Database connection required");let a=`DELETE FROM ${e.prefix}music_artists WHERE id = $id`;e.sqlite.run(a,{$id:t},(e=>null!==e?r(new Error(e)):i(!0)))})),t.updateArtist=(e,t,i,r=!1)=>{},t.updateNameCol=async(e,t,i)=>{try{return await e.update("artists",t,{artist_name:i,artist_plaintext_name:a(i)})}catch(e){return console.error(`Something went wrong updating column 'artist_name' with new value '${i}' for artist ID '${t}'`),!1}},t.updateBioCol=async(e,t,i)=>{try{return await e.update("artists",t,{artist_bio:i})}catch(e){return console.error(`Something went wrong updating column 'artist_bio' with new value '${i}' for artist ID '${t}'`),!1}},t.updatePhotoCol=async(e,t,i)=>{if(!i)return await e.update("artists",t,{artist_photo:null});if("object"==typeof i)return await e.update("artists",t,{artist_photo:i});if("string"!=typeof i)return console.error("updatePhotoCol() was given data that is not a string, object, or null"),!1;try{return(await this.getArtist(e,t)).artist_plaintext_name.replace(/[^a-zA-Z0-9]/g,""),i.split(r.sep).pop(),e.update("artists",t,{artist_photo:thumbs})}catch(e){return console.error(`Something went wrong updating column 'artist_photo' with new value '${i}' for artist ID '${t}'`),!1}},t.removeSmartFillReferences=async(e,t)=>{let i=`SELECT * FROM ${e.prefix}meta WHERE (meta_key = $key) AND (meta_value LIKE $name)`,r=await e.all(i,{$key:"smart-fill-guesses",$name:`%${t}%`});if(!r.length)return!0;let a={};for(let i of r){a[i.id]=!1;let r={...i.value};delete r.albumartist,delete r.artist_name,"artists"in r&&(r.artists=r.artists.filter((e=>e!==t)),r.artists.length||delete r.artists);try{await e.update("meta",i.id,{meta_object_id:i.objectid,meta_key:"smart-fill-guesses",meta_value:r})&&(a[i.id]=!0)}catch(e){throw new Error("Something went wrong when removing references to artist")}}return!!Object.values(a).every((e=>!0===e))&&Object.keys(a)},t.updateForeignKeys=async(e,t,i)=>{let r={},a=await e.all("SELECT * FROM {db.prefix}albums WHERE album_artist_id = $id",{$id:t});if(a.length){r.albums=[];for(let t of a){if(!await e.update("albums",t.id,{album_artist_id:i,album_artist_ids:[i]}))throw new Error("Something went wrong when updating foreign key references after an artist merge");r.albums.push(t.id)}}let s=await e.all("SELECT * FROM {db.prefix}music_tracks WHERE track_artist_id = $id",{$id:t});if(s.length){r.tracks=[];for(let t of s){if(!await e.update("tracks",t.id,{track_artist_id:i,track_artist_ids:[i]}))throw new Error("Something went wrong when updating track references after an artist merge");r.tracks.push(t.id)}}return r},t.getArtistTopAlbums=async(e,t,i=24)=>{let r=`\n    SELECT *, COUNT(${e.prefix}music_tracks.track_release_id) AS timesAnyTrackOnAlbumWasPlayed\n    FROM ${e.prefix}music_history\n    LEFT JOIN ${e.prefix}music_tracks ON music_history_track_id = ${e.prefix}music_tracks.id\n    LEFT JOIN ${e.prefix}albums ON ${e.prefix}music_tracks.track_release_id = ${e.prefix}albums.id\n    WHERE ${e.prefix}music_tracks.track_artist_id = $artistId\n    GROUP BY ${e.prefix}music_tracks.track_release_id\n    ORDER BY COUNT(${e.prefix}music_tracks.track_release_id) DESC\n    LIMIT $max`,a={$max:i,$artistId:t};return await e.all(r,a)}},5287:(e,t)=>{t.getDirectory=async(e,t)=>{if(!e.isConnected())throw new Error("Databse connection required");let i,r;return"number"==typeof t?(i=`SELECT * FROM ${e.prefix}directories WHERE id = $id`,r={$id:t}):"string"==typeof t&&(i=`SELECT * FROM ${e.prefix}directories WHERE dir_path = $path`,r={$path:t}),await e.get(i,r)},t.getAllDirectories=async e=>{if(!e.isConnected())throw new Error("Databse connection required");let t=`SELECT * FROM ${e.prefix}directories`;return await e.all(t)},t.addDirectory=async(e,t)=>{if(!e.isConnected())throw new Error("Database connection required");let i=`\n      INSERT INTO ${e.prefix}directories (dir_path, dir_multimedia_type, dir_date_added)\n      VALUES ($dir_path, $dir_multimedia_type, $dir_date_added)`,r={$dir_path:t.dir_path,$dir_multimedia_type:t.dir_multimedia_type,$dir_date_added:t.dir_date_added};return await e.run(i,r)},t.removeDirectory=async(e,t)=>{if(!e.isConnected())throw new Error("Database connection required");let i=`\n      DELETE FROM ${e.prefix}directories\n      WHERE id = $id`,r={$id:t};return await e.run(i,r)}},5019:(e,t)=>{t.getFavorite=async(e,t)=>{if(!e.isConnected())throw new Error("Databse connection required");if(!t)throw new Error("Favorite ID is required");let i=`SELECT * FROM ${e.prefix}favorites WHERE id = $id`,r={$id:t};return await e.get(i,r)},t.getFavoriteOfType=async(e,t,i)=>{if(!e.isConnected())throw new Error("Databse connection required");if(!i)throw new Error("Favorite thing type is required");let r=`SELECT * FROM ${e.prefix}favorites WHERE favorite_thing_id = $thingId AND favorite_thing_type = $type`,a={$thingId:t,$type:i};return await e.get(r,a)},t.getFavoritesOfType=async(e,t)=>{if(!e.isConnected())throw new Error("Databse connection required");if(!t)throw new Error("Favorite type is required");let i=`SELECT * FROM ${e.prefix}favorites WHERE favorite_thing_type = $type`,r={$type:t};return await e.all(i,r)},t.getAllFavorites=async e=>{if(!e.isConnected())throw new Error("Databse connection required");let t=`SELECT * FROM ${e.prefix}favorites`;return await e.all(t)},t.addFavorite=async(e,t)=>{if(!e.isConnected())throw new Error("Database connection required");let i=`\n      INSERT INTO ${e.prefix}favorites (favorite_thing_id, favorite_thing_type, favorite_date_added)\n      VALUES ($favorite_thing_id, $favorite_thing_type, $favorite_date_added)`,r={$favorite_thing_id:t.favorite_thing_id,$favorite_thing_type:t.favorite_thing_type,$favorite_date_added:t.favorite_date_added};return await e.run(i,r)},t.removeFavorite=async(e,t)=>{if(!e.isConnected())throw new Error("Database connection required");let i=`\n      DELETE FROM ${e.prefix}favorites\n      WHERE id = $id`,r={$id:t};return await e.run(i,r)},t.removeFavoriteOfType=async(e,t,i)=>{if(!e.isConnected())throw new Error("Database connection required");let r=`\n      DELETE FROM ${e.prefix}favorites\n      WHERE favorite_thing_id = $id\n      AND favorite_thing_type = $type`,a={$id:t,$type:i};return await e.run(r,a)}},2188:function(e,t,i){const r=i(3269),a=i(2934),s=i(9774),n=i(7082);this.feedBlocks=["top-albums","top-tracks","shuffle-all-music","recently-played-albums","recently-played-tracks","recently-added-music","albums-with-favorites","artist"],t.getFeedBlock=async(e,t,i={})=>{switch(t){case"top-albums":return await this.getBlockTopAlbums(e,i);case"top-tracks":return await this.getBlockTopTracks(e,i);case"shuffle-all-music":return await this.getBlockShuffleAllMusic(e,i);case"recently-played-albums":return await this.getBlockRecentlyPlayedAlbums(e,i);case"recently-played-tracks":return await this.getBlockRecentlyPlayedTracks(e,i);case"recently-added-albums":return await this.getBlockRecentlyAddedAlbums(e,i);case"albums-with-favorites":return await this.getBlockAlbumsWithFavorites(e,i);case"artist":return await this.getBlockArtist(e,i)}},t.getBlockTopAlbums=async(e,t={})=>{let i=t.max||24,r=await a.getTopMusicReleases(e,i);if(!r.length){let t=`\n      SELECT *\n      FROM ${e.prefix}music_releases\n      ORDER BY RANDOM()\n      LIMIT $max`,a={$max:i};r=await e.all(t,a)}return{blockName:"top-albums",options:t,dataSignature:r.map((e=>e.id)).join(","),data:r}},t.getBlockTopTracks=async(e,t={})=>{let i=t.max||24,r=await s.getTopTracks(e,i);if(!r.length){let t=`\n      SELECT *\n      FROM ${e.prefix}music_tracks\n      ORDER BY RANDOM()\n      LIMIT $max`,a={$max:i};r=await e.all(t,a)}return{blockName:"top-tracks",options:t,dataSignature:r.map((e=>e.id)).join(","),data:r}},t.getBlockRecentlyPlayedAlbums=async(e,t={})=>{let i=t.max||24,r=await a.getRecentlyPlayedMusicReleases(e,i);return{blockName:"recently-played-albums",options:t,dataSignature:r.map((e=>e.id)).join(","),data:r}},t.getBlockRecentlyPlayedTracks=async(e,t={})=>{let i=t.max||24,r=await s.getRecentlyPlayedTracks(e,i);return{blockName:"recently-played-tracks",options:t,dataSignature:r.map((e=>music_history_track_id)).join(","),data:r}},t.getBlockShuffleAllMusic=async(e,t={})=>({blockName:"shuffle-all-music",options:t,dataSignature:null,data:null}),t.getBlockRecentlyAddedAlbums=async(e,t={})=>{let i=t.max||24,r=t.maxDaysOld||14,s=await a.getRecentlyAddedMusicReleases(e,i,r);return{blockName:"recently-added-albums",options:t,dataSignature:s.map((e=>e.id)).join(","),data:s}},t.getBlockAlbumsWithFavorites=async(e,t={})=>{let i=t.max||24,r=await a.getMusicReleasesWithFavorites(e,i);return r.length?{blockName:"albums-with-favorites",options:t,dataSignature:r.join(","),data:r}:{blockName:"albums-with-favorites",options:t,dataSignature:null,data:[]}},t.getBlockArtist=async(e,t={})=>{let i=t.maxAlbums||3,a=(t.maxTracks,n.string("media-feed-block.artist.top-albums-title")),s=(n.string("media-feed-block.artist.top-tracks-title"),await r.getArtistTopAlbums(e,t.artistId,i));return s.length||(a=n.string("media-feed-block.artist.random-albums-title")),{blockName:"artist",options:t,dataSignature:s.map((e=>e.id)).join(","),data:{albums:s,albumsTitle:a}}}},6320:function(e,t){t.createGenre=(e,t)=>new Promise(((i,r)=>{if(!e.isConnected())throw new Error("Database connection required");let a=`\n        INSERT INTO ${e.prefix}music_genres (genre_name, genre_description)\n        VALUES ($genre_name, $genre_description)\n        `,s={$genre_name:t.genre_name,$genre_description:t.genre_description};e.sqlite.run(a,s,(function(e){null===e?i({id:this.lastID,...t}):r(new Error(e))}))})),t.getGenre=(e,t)=>new Promise(((i,r)=>{if(!e.isConnected())throw new Error("Database connection required");let a=null;switch(typeof t){case"string":a=`SELECT * FROM ${e.prefix}music_genres WHERE genre_name = $value`;break;case"number":a=`SELECT * FROM ${e.prefix}music_genres WHERE id = $value`}null===a&&r(new Error("getGenre() expects a string or integer")),e.sqlite.get(a,{$value:t},((t,a)=>{null!==t&&r(new Error(t)),void 0===a&&i(null),i(e.jsonifyValues(a))}))})),t.getAllGenres=e=>new Promise(((t,i)=>{if(!e.isConnected())throw new Error("Database connection required");let r=`SELECT * from ${e.prefix}music_genres`;e.sqlite.all(r,[],((r,a)=>{null!==r&&i(new Error(r)),t(e.jsonifyValues(a))}))})),t.updateGenre=(e,t,i)=>new Promise((async(r,a)=>{if(!e.isConnected())throw new Error("Database connection required");let s=await this.getGenre(t);if("genre_name"in i){let a=await this.getGenre(e,i.genre_name);if(a&&a.id!==t)return r({success:!1,reason:"user-cancel"})}let n={};for(let[r,a]of Object.entries(i))switch(r){case"genre_name":n[r]=await this.updateNameCol(e,t,a)}return Object.values(n).every((e=>!0===e))?r({success:!0,rowBeforeUpdate:s,rowAfterUpdate:await this.getGenre(e,t),colUpdateResults:n,updated:{genres:t},row:i}):r({success:!1})})),t.updateNameCol=async(e,t,i)=>{try{return await e.update("genres",t,{genre_name:i})}catch(e){return console.error(`Something went wrong updating column 'genre_name' with new value '${i}' for genre ID '${t}'`),!1}},t.updateForeignKeys=async(e,t,i)=>{let r={},a=`\n    SELECT * \n    FROM ${e.prefix}music_tracks\n    WHERE\n      track_genre_ids LIKE '%[' || $oldId || ']%'\n    OR\n      track_genre_ids LIKE '%[' || $oldId || ',%'\n    OR\n      track_genre_ids LIKE '%,' || $oldId || ',%'\n    OR\n      track_genre_ids LIKE '%,' || $oldId || ']%'`,s=await e.all(a,{$oldId:t});if(s.length){r.tracks=[];for(let a of s){if(-1!==a.track_genre_ids.indexOf(t)&&(a.track_genre_ids.splice(a.track_genre_ids.indexOf(t),1),-1===a.track_genre_ids.indexOf(i)&&a.track_genre_ids.push(i)),!await e.update("tracks",a.id,{track_genre_ids:a.track_genre_ids}))throw new Error("Something went wrong when updating genre foreign keys");r.tracks.push(a.id)}}return r}},1658:(e,t)=>{t.getFromMusicHistory=(e,t)=>new Promise(((i,r)=>{if(!e.isConnected())throw new Error("Databse connection required");let a=`SELECT * FROM ${e.prefix}music_history WHERE id = $id`;e.sqlite.get(a,{$id:t},((t,a)=>{null===t?i(void 0!==a?e.prepareValueForReturn(a.value):void 0):r(new Error(t))}))})),t.addToMusicHistory=(e,t)=>new Promise((async(i,r)=>{if(!e.isConnected())throw new Error("Database connection required");if(!("trackId"in t))throw new Error("Track ID required");"weather"in t||(t.weather=null),"mood"in t||(t.mood=null),"device"in t||(t.device=null);let a=`\n        INSERT INTO ${e.prefix}music_history (music_history_track_id, music_history_timestamp, music_history_month, music_history_day, music_history_hours, music_history_weather, music_history_seconds_listened, music_history_percent_listened, music_history_device)\n        VALUES ($music_history_track_id, $music_history_timestamp, $music_history_month, $music_history_day, $music_history_hours, $music_history_weather, $music_history_seconds_listened, $music_history_percent_listened, $music_history_device)`,s=new Date,n={$music_history_track_id:t.trackId,$music_history_timestamp:Date.now(),$music_history_month:s.getMonth(),$music_history_day:s.getDay(),$music_history_hours:s.getHours(),$music_history_weather:t.weather,$music_history_seconds_listened:t.secondsListened,$music_history_percent_listened:t.percentListened,$music_history_device:t.device};e.sqlite.run(a,n,(function(e){null===e?i(!0):r(new Error(e))}))})),t.deleteFromMusicHistory=(e,t)=>new Promise(((i,r)=>{if(!e.isConnected())throw new Error("Database connection required");let a=`\n        DELETE FROM ${e.prefix}music_history\n        WHERE id = $id`,s={$id:t};e.sqlite.run(a,s,(function(e){null===e?i(!0):r(new Error(e))}))})),t.getArtistMostPlayedTracks=async(e,t)=>{if(!e.isConnected())throw new Error("Database connection required");let i=`\n    SELECT * \n    FROM ${e.prefix}music_history \n    LEFT JOIN ${e.prefix}music_tracks ON music_history_track_id = ${e.prefix}music_tracks.id\n    LEFT JOIN ${e.prefix}music_artists ON ${e.prefix}music_tracks.track_artist_id = ${e.prefix}music_artists.id\n    WHERE ${e.prefix}music_artists.id = $artistid`,r=await e.all(i,{$artistid:t});if(!r.length)return[];let a={};for(let e of r)e.music_history_track_id in a?a[e.music_history_track_id]++:a[e.music_history_track_id]=1;let s=Object.entries(a).sort(((e,t)=>e[1]-t[1])).reverse(),n=[];for(let e of s)n.push({id:parseInt(e[0]),playCount:e[1]});return n}},3547:function(e,t,i){const r=i(5747),a=i(5622),s=i(2732),n=i(742),o=i(6417);t.getImage=async(e,t)=>{if(!e.isConnected())throw new Error("Database connection required");let i;if("number"==typeof t){let r=await e.all(`SELECT * FROM ${e.prefix}images WHERE id = $imageId`,{$imageId:t});if(!r.length)return null;i=r[0]}else if("string"==typeof t){let r=await s(t),a=await e.all(`SELECT * FROM ${e.prefix}images WHERE image_original_md5 = $md5`,{$md5:r});if(!a.length)return null;i=a[0]}if(!i)throw new Error("Could not find image with ID or path:",t);let r=await this.getThumbnails(e,i.id);return{...i,thumbs:r}},t.getThumbnails=async(e,t)=>{let i=await e.all(`\n      SELECT * FROM ${e.prefix}image_thumbs\n      WHERE thumb_original_id = $imageId\n      ORDER BY thumb_width DESC`,{$imageId:t});if(i.length){let e={};for(let t of i)e[t.thumb_width]=t;i=e}return i},t.cacheImage=async(e,t,i,r=null,a=!1,s=null)=>{if(!e.isConnected())throw new Error("Database connection required");let n,o=await this.getImage(e,t);if(o&&!a)return o;if(o&&a&&!await this.deleteCachedImage(o.id))throw new Error(`Could not delete existing cache during overwrite process for image ${t}`);try{n=await this._cacheImage_original(e,t,r)}catch(e){console.error(e)}try{await this._cacheImage_createThumbs(e,n,t,i,s)}catch(e){console.error(e)}return await this.getImage(e,n)},t._cacheImage_original=(e,t,i)=>new Promise((async(r,a)=>{if(!e.isConnected())throw new Error("Database connection required");let n=`\n        INSERT INTO ${e.prefix}images (image_original_location, image_original_md5, image_role)\n        VALUES ($image_original_location, $image_original_md5, $image_role)`,o=await s(t)||null,u={$image_original_location:t,$image_original_md5:o,$image_role:i};e.sqlite.run(n,u,(function(e){if(null!==e)throw e;return this.lastID?r(this.lastID):r(!1)}))})),t._cacheImage_createThumbs=(e,t,i,r,a)=>new Promise((async(s,n)=>{if(!e.isConnected())throw new Error("Database connection required");a||(a=[{w:75,h:75},{w:200,h:200},{w:400,h:400}]);let o=[],u=i.split(".").pop();for(let n of a){let a;a="gif"===u?i:await this.createThumbnail(i,r,n.w,n.h);let l=`\n          INSERT INTO ${e.prefix}image_thumbs (thumb_original_id, thumb_file, thumb_width, thumb_height)\n          VALUES ($thumb_original_id, $thumb_file, $thumb_width, $thumb_height)`,c={$thumb_original_id:t,$thumb_file:a,$thumb_width:n.w,$thumb_height:n.h};await new Promise(((t,i)=>{e.sqlite.run(l,c,(async function(i){if(null!==i)throw i;if(!this.lastID)return s(!1);o.push(await e.getRow("image_thumbs",this.lastID)),t()}))}))}return s(o)})),t.createThumbnail=async(e,t,i,s)=>{let u=e.split(".").pop(),l=o.randomBytes(24).toString("hex")+"."+u,c=a.join(t,l);if(r.existsSync(t)||r.mkdirSync(t,{recursive:!0}),"gif"===u)throw new Error("Cardinal does not support creating thumbnails of gifs.");try{let t=await n(e,{failOnError:!1});["jpg","jpeg"].includes(u)&&t.jpeg({quality:100,progressive:!0}),t.resize(Number(i),Number(s),{fit:"inside"}),t.toFile(c)}catch(e){throw console.warn(e),e}return c},t.deleteCachedImage=async(e,t)=>{if(!e.isConnected())throw new Error("Database connection required");let i=await this.getImage(e,t);if(!i)throw new Error("Trying to delete image from database that does not exist",t);if(Object.values(i.thumbs).length)for(let[t,r]of Object.entries(i.thumbs)){if(!await this.deleteCachedImageFile(r.thumb_file))throw new Error(`Could not delete cached image file ${r.thumb_file}`);if(!await e.deleteRow("image_thumbs",r.id))throw new Error(`Could not delete thumbnail ${r.id}`)}if(!await e.deleteRow("images",t))throw new Error(`Could not delete image ${thumb.id}`);return!0},t.deleteCachedImageFile=e=>{if(r.existsSync(e)){try{r.unlinkSync(e)}catch(t){return console.warn("Error deleting cached file",e),!1}return!0}console.log(`Seems like the cached image was already deleted externally: ${e}`)}},7514:(e,t,i)=>{const r=i(3269),a=i(2934),s=i(9774),n=i(5092),o=i(6320),u=i(5580),l=i(2188),c=i(1658),d=i(3547),m=i(5287),p=i(5019);e.exports={...r,...p,...a,...s,...n,...o,...u,...l,...c,...d,...m}},5092:function(e,t){t.addMeta=async(e,t,i,r,a)=>{if(!e.isConnected())throw new Error("Databse connection required");let s=[];if(Array.isArray(a))for(let t of a)s.push({[r]:e.prepareValueForInsert(t)});else if("object"==typeof a)for(let[t,i]of Object.entries(a))s.push({[`${r}.${t}`]:e.prepareValueForInsert(i)});else s.push({[r]:e.prepareValueForInsert(a)});for(let r of s){let a=`\n        INSERT INTO ${e.prefix}${t}_meta (meta_object_id, meta_key, meta_value)\n        VALUES ($meta_object_id, $meta_key, $meta_value)`,s={$meta_object_id:i,$meta_key:Object.keys(r)[0],$meta_value:Object.values(r)[0]};if(!await e.run(a,s))return!1}return!0},t.getMeta=async(e,t,i,r)=>{if(!e.isConnected())throw new Error("Databse connection required");if(!r)return await this.getAllMeta(e,t,i);let a=`\n      SELECT meta_value \n      FROM ${e.prefix}${t}_meta \n      WHERE meta_object_id = $meta_object_id\n      AND meta_key = $meta_key`,s={$meta_object_id:i,$meta_key:r},n=await e.all(a,s);if(!n.length)return;let o=n.map((t=>e.prepareValueForReturn(t.meta_value)));return 1===o.length?o[0]:o},t.getAllMeta=async(e,t,i)=>{let r=`\n      SELECT meta_key, meta_value\n      FROM ${e.prefix}${t}_meta\n      WHERE meta_object_id = $meta_object_id`,a={$meta_object_id:i},s=await e.all(r,a);if(!s.length)return;let n={};for(let e of s)e.meta_key in n||(n[e.meta_key]=[]),n[e.meta_key].push(e.meta_value);for(let[e,t]of Object.entries(n))1===t.length&&(n[e]=t[0]);return n},t.updateMeta=async(e,t,i,r,a)=>{let s=`\n      SELECT id \n      FROM ${e.prefix}${t}_meta \n      WHERE meta_object_id = $meta_object_id\n      AND meta_key = $meta_key`,n={$meta_object_id:i,$meta_key:r},o=await e.all(s,n);if(!o.length)return await this.addMeta(e,t,i,r,a);for(let i of o)await e.updateRow(`${t}_meta`,i.id,{meta_value:a});return!0},t.deleteMeta=(e,t,i,r,a)=>new Promise(((s,n)=>{if(!e.isConnected())throw new Error("Databse connection required");let o,u;void 0===a?(o=`\n          DELETE FROM \n            ${e.prefix}${t}_meta \n          WHERE \n            meta_object_id = $meta_object_id\n            AND meta_key = $meta_key`,u={$meta_object_id:i,$meta_key:r}):(o=`\n          DELETE FROM \n            ${e.prefix}${t}_meta \n          WHERE \n            meta_object_id = $meta_object_id \n            AND meta_key = $meta_key \n            AND meta_value = $meta_value`,u={$meta_object_id:i,$meta_key:r,$meta_value:a}),e.sqlite.run(o,u,(function(e,t){if(null!==e&&n(new Error(`Error deleting meta key ${r} for object ID ${objectid}`)),!this.changes)return s(!1);s(!0)}))}))},2934:function(e,t,i){const r=i(5092),a=i(3547),s=i(5019),{formatPlaintextName:n}=i(816);async function o(e,t){let i=[];for(let s of t){let t=await r.getMeta(e,"music_release",s.id),n=null;t&&"artwork"in t&&(n=await a.getImage(e,t.artwork)),i.push({...s,meta:t,artwork:n})}return i}t.createMusicRelease=async(e,t,i)=>{if(!e.isConnected())throw new Error("Database connection required");let a=`\n      INSERT INTO ${e.prefix}music_releases (release_title, release_plaintext_title, release_primary_artist_id, release_type, release_discs, release_year, release_year_ms, release_date_added)\n      VALUES ($release_title, $release_plaintext_title, $release_primary_artist_id, $release_type, $release_discs, $release_year, $release_year_ms, $release_date_added)`,s={$release_title:t.release_title,$release_plaintext_title:n(t.release_title),$release_primary_artist_id:t.release_primary_artist_id,$release_type:t.release_type,$release_discs:t.release_discs,$release_year:t.release_year,$release_year_ms:t.release_year_ms,$release_date_added:t.release_date_added},o=await e.run(a,s);if(!o)throw new Error("Error creating release");if(i)for(let t of i)for(let[i,a]of Object.entries(t))await r.addMeta(e,"music_release",o,i,a);return o},t.getMusicRelease=async(e,t,i=!1)=>{if(!e.isConnected())throw new Error("Database connection required");if(void 0===t)throw new Error("getMusicRelease() requires a release ID or name");return i?await this._getMusicReleaseByArtist(e,t,i):await this._getMusicReleaseWithoutKnowingArtist(e,t)},t._getMusicReleaseByArtist=async(e,t,i)=>{let r,a=null;if("string"==typeof i?a=await e.all(`SELECT * FROM ${e.prefix}music_artists WHERE artist_name = $artist`,{$artist:i}):"number"==typeof i&&(a=await e.all(`SELECT * FROM ${e.prefix}music_artists WHERE id = $artist`,{$artist:i})),!a.length)return;a=a[0],"string"==typeof t?r=`\n        SELECT *\n        FROM ${e.prefix}music_releases\n        WHERE release_title = $release\n        AND release_primary_artist_id = $artistId`:"number"==typeof t&&(r=`\n        SELECT *\n        FROM ${e.prefix}music_releases\n        WHERE id = $release\n        AND release_primary_artist_id = $artistId`);let s={$release:t,$artistId:a.id},n=await e.all(r,s);return n.length?await o(e,n):void 0},t._getMusicReleaseWithoutKnowingArtist=async(e,t)=>{let i;"string"==typeof t?i=`SELECT * FROM ${e.prefix}music_releases WHERE release_title = $release`:"number"==typeof t&&(i=`SELECT * FROM ${e.prefix}music_releases WHERE id = $release`);let r={$release:t},a=await e.all(i,r);if(a.length)return await o(e,a)},t.getAllMusicReleases=async(e,t)=>{if(!e.isConnected())throw new Error("Database connection required");let i,r;"number"==typeof t?(i=`SELECT * from ${e.prefix}music_releases WHERE release_primary_artist_id = $artistId`,r={$artistId:t}):(i=`SELECT * from ${e.prefix}music_releases`,r=[]);let a=await e.all(i,r);if(a.length)return await o(e,a)},t.deleteMusicRelease=async(e,t)=>{if(!e.isConnected())throw new Error("Database connection required");let i=`DELETE FROM ${e.prefix}music_releases WHERE id = $id`;if(!await e.run(i,{$id:t}))throw new Error(`Error deleting release with ID ${t}`);let r=`DELETE FROM ${e.prefix}music_release_meta WHERE meta_object_id = $id`;if(!await e.run(r,{$id:t}))throw new Error(`Error deleting release meta with ID ${t}`);return!0},t.getRecentlyAddedMusicReleases=async(e,t=24,i=14)=>{let r=Date.now()-864e5*i,a=`\n    SELECT *\n    FROM ${e.prefix}music_releases\n    LEFT JOIN ${e.prefix}music_tracks ON ${e.prefix}music_tracks.track_release_id = ${e.prefix}music_releases.id\n    WHERE ${e.prefix}music_tracks.track_date_added > $timestamp\n    GROUP BY ${e.prefix}music_tracks.track_release_id\n    ORDER BY track_date_added DESC\n    LIMIT $max`,s={$max:t,$timestamp:r};return await e.all(a,s)},t.getTopMusicReleases=async(e,t=24)=>{let i=`\n    SELECT *, COUNT(${e.prefix}music_tracks.track_release_id) AS timesAnyTrackOnAlbumWasPlayed\n    FROM ${e.prefix}music_history\n    LEFT JOIN ${e.prefix}music_tracks ON music_history_track_id = ${e.prefix}music_tracks.id\n    LEFT JOIN ${e.prefix}music_releases ON ${e.prefix}music_tracks.track_release_id = ${e.prefix}music_releases.id\n    GROUP BY ${e.prefix}music_tracks.track_release_id\n    ORDER BY COUNT(${e.prefix}music_tracks.track_release_id) DESC\n    LIMIT $max`,r={$max:t};return await e.all(i,r)},t.getRecentlyPlayedMusicReleases=async(e,t=24)=>{let i=`\n    SELECT *\n    FROM ${e.prefix}music_history\n    LEFT JOIN ${e.prefix}music_tracks ON music_history_track_id = ${e.prefix}music_tracks.id\n    LEFT JOIN ${e.prefix}music_releases ON ${e.prefix}music_tracks.track_release_id = ${e.prefix}music_releases.id\n    GROUP BY ${e.prefix}music_tracks.track_release_id\n    ORDER BY MAX(music_history_timestamp) DESC\n    LIMIT $max`,r={$max:t};return await e.all(i,r)},t.getMusicReleasesWithFavorites=async(e,t=24)=>{let i=await s.getFavoritesOfType(e,"music-track");if(!i)return[];let r=i.map((e=>e.favorite_thing_id)),a=`\n    SELECT DISTINCT track_release_id\n    FROM ${e.prefix}music_tracks\n    WHERE ${e.prefix}music_tracks.id IN (${r.join(",")})\n    LIMIT $max`,n={$max:t};return(await e.all(a,n)).map((e=>e.track_release_id))}},5580:function(e,t){t.createPlaylist=(e,t)=>new Promise(((i,r)=>{if(!e.isConnected())throw new Error("Database connection required");let a=`\n        INSERT INTO ${e.prefix}music_playlists (playlist_name, playlist_tags, playlist_track_ids)\n        VALUES ($playlist_name, $playlist_tags, $playlist_track_ids)\n        `,s={$playlist_name:t.playlist_name,$playlist_tags:t.playlist_tags,$playlist_track_ids:t.playlist_track_ids};e.sqlite.run(a,s,(function(a){null===a?i(e.jsonifyValues({id:this.lastID,...t})):r(new Error(a))}))})),t.getPlaylist=(e,t)=>new Promise(((i,r)=>{if(!e.isConnected())throw new Error("Database connection required");let a=null;switch(typeof t){case"string":a=`SELECT * FROM ${e.prefix}music_playlists WHERE playlist_name = $value`;break;case"number":a=`SELECT * FROM ${e.prefix}music_playlists WHERE id = $value`}null===a&&r(new Error("getPlaylist() expects a string or integer")),e.sqlite.get(a,{$value:t},((t,a)=>{null!==t&&r(new Error(t)),void 0===a&&i(null),i(e.jsonifyValues(a))}))})),t.getAllPlaylists=e=>new Promise(((t,i)=>{if(!e.isConnected())throw new Error("Database connection required");let r=`SELECT * from ${e.prefix}music_playlists`;e.sqlite.all(r,[],((r,a)=>{null!==r&&i(new Error(r)),t(e.jsonifyValues(a))}))})),t.deletePlaylist=(e,t)=>new Promise(((i,r)=>{if(!e.isConnected())throw new Error("Database connection required");let a=`\n        DELETE FROM ${e.prefix}music_playlists\n        WHERE id = $id\n        `,s={$id:t};e.sqlite.run(a,s,(function(e){null===e?i(!0):r(new Error(e))}))})),t.updatePlaylist=(e,t,i)=>new Promise((async(r,a)=>{if(!e.isConnected())throw new Error("Database connection required");let s=await this.getPlaylist(e,t),n={};for(let[r,a]of Object.entries(i))switch(r){case"playlist_name":n[r]=await this.updateNameCol(e,t,a);break;case"playlist_tags":n[r]=await this.updateTagsCol(e,t,a)}return Object.values(n).every((e=>!0===e))?r({success:!0,rowBeforeUpdate:s,rowAfterUpdate:await this.getPlaylist(e,t),colUpdateResults:n,updated:{playlists:t},row:i}):r({success:!1})})),t.updateNameCol=async(e,t,i)=>{try{return await e.update("playlists",t,{playlist_name:i})}catch(e){return console.error(`Something went wrong updating column 'playlist_name' with new value '${i}' for playlist ID '${t}'`),!1}},t.updateTagsCol=async(e,t,i)=>{try{return await e.update("playlists",t,{playlist_tags:i})}catch(e){return console.error(`Something went wrong updating column 'playlist_tags' with new value '${i}' for playlist ID '${t}'`),!1}}},9774:function(e,t,i){const r=i(3269),a=i(2934),s=i(5092),{formatPlaintextName:n}=i(816);t.createTrack=(e,t)=>new Promise(((i,r)=>{if(!e.isConnected())throw new Error("Database connection required");let a=`\n        INSERT INTO ${e.prefix}music_tracks (track_file_id, track_title, track_plaintext_title, track_release_id, track_num, track_disc, track_artist_id, track_date, track_date_ms, track_duration, track_duration_formatted, track_bitrate, track_lossless, track_codec, track_codec_profile, track_container, track_num_channels, track_source, track_date_added)\n        VALUES ($track_file_id, $track_title, $track_plaintext_title, $track_release_id, $track_num, $track_disc, $track_artist_id, $track_date, $track_date_ms, $track_duration, $track_duration_formatted, $track_bitrate, $track_lossless, $track_codec, $track_codec_profile, $track_container, $track_num_channels, $track_source, $track_date_added)\n        `,s={$track_file_id:t.track_file_id,$track_title:t.track_title,$track_plaintext_title:t.track_plaintext_title,$track_release_id:t.track_release_id,$track_num:t.track_num,$track_disc:t.track_disc,$track_artist_id:t.track_artist_id,$track_date:t.track_date,$track_date_ms:t.track_date_ms,$track_duration:t.track_duration,$track_duration_formatted:t.track_duration_formatted,$track_bitrate:t.track_bitrate,$track_lossless:t.track_lossless,$track_codec:t.track_codec,$track_codec_profile:t.track_codec_profile,$track_container:t.track_container,$track_num_channels:t.track_num_channels,$track_source:t.track_source,$track_date_added:t.track_date_added};e.sqlite.run(a,s,(function(e){if(null!==e)throw e;this.lastID?i({id:this.lastID,...t}):i(!1)}))})),t.getTrack=(e,t,i=!1)=>new Promise(((r,a)=>{if(!e.isConnected())throw new Error("Database connection required");let s=null;if(i)s=`SELECT * FROM ${e.prefix}music_tracks WHERE track_file_id = $value`;else switch(typeof t){case"string":s=`SELECT * FROM ${e.prefix}music_tracks WHERE track_title = $value`;break;case"number":s=`SELECT * FROM ${e.prefix}music_tracks WHERE id = $value`}null===s&&a(new Error("getTrack() expects a string or integer")),e.sqlite.get(s,{$value:t},((t,i)=>{null!==t&&a(new Error(t)),void 0===i&&r(null),r(e.jsonifyValues(i))}))})),t.getAllTracks=e=>new Promise(((t,i)=>{if(!e.isConnected())throw new Error("Database connection required");let r=`SELECT * from ${e.prefix}music_tracks`;e.sqlite.all(r,[],((r,a)=>{null!==r&&i(new Error(r)),t(e.jsonifyValues(a))}))})),t.updateTrack=(e,t,i,r=!1)=>new Promise((async(e,t)=>{})),t.updateTitleCol=async(e,t,i)=>{try{return await e.update("tracks",t,{track_title:i,track_plaintext_title:n(i)})}catch(e){return console.error(`Something went wrong updating column 'album_title' with new value '${i}' for track ID '${t}'`),!1}},t.updateAlbumCol=async(e,t,i,r)=>{if("number"==typeof i)try{return await e.update("tracks",t,{track_release_id:i})}catch(e){return console.error(`Something went wrong updating column 'track_release_id' with new value '${i}' for track ID '${t}'`),!1}else if("string"==typeof i){let s,o=await this.getTrack(t),u=await a.getMusicRelease(i,r);s=u?u.id:(await a.createMusicRelease({album_title:i,album_plaintext_title:n(i),album_artist_id:o.track_artist_id,album_artist_ids:JSON.stringify([o.track_artist_id]),album_year:null,album_year_ms:null,album_artwork:null,album_date_added:Date.now()})).id;try{return await e.update("tracks",t,{track_release_id:s})}catch(e){return console.error(`Something went wrong updating column 'track_release_id' with new value '${i}' for track ID '${t}'`),!1}}},t.updateArtistCol=async(e,t,i)=>{if("number"==typeof i)try{return await e.update("tracks",t,{track_artist_id:i,track_artist_ids:[i]})}catch(e){return console.error(`Something went wrong updating column 'track_artist_id' with new value '${i}' for track ID '${t}'`),!1}else if("string"==typeof i){let a,s=await r.getArtist(i);a=s?s.id:(await r.createArtist({artist_name:i,artist_plaintext_name:n(i),artist_bio:null,artist_photo:null,artist_date_added:Date.now()})).id;try{return await e.update("tracks",t,{track_artist_id:a,track_artist_ids:[a]})}catch(e){return console.error(`Something went wrong updating column 'track_artist_id' with new value '${i}' for track ID '${t}'`),!1}}},t.updateTrackNumCol=async(e,t,i)=>{try{return await e.update("tracks",t,{track_num:i})}catch(e){return console.error(`Something went wrong updating column 'track_num' with new value '${i}' for track ID '${t}'`),!1}},t.updateDateCol=async(e,t,i)=>{try{return await e.update("tracks",t,{track_date:i,track_date_ms:Date.parse(i)})}catch(e){return console.error(`Something went wrong updating column 'track_date' with new value '${i}' for track ID '${t}'`),!1}},t.updateDiscsCol=async(e,t,i,r)=>{try{return"number"!=typeof i&&(i=null),"number"!=typeof r&&(r=null),await e.update("tracks",t,{track_disc:{no:i,of:r}})}catch(e){return console.error(`Something went wrong updating column 'track_discs' with new value '${date}' for track ID '${t}'`),!1}},t.updateGenresCol=async(e,t,i)=>{try{return"number"!=typeof i&&"string"!=typeof i||(i=[parseInt(i)]),i=i.map((e=>parseInt(e))),await e.update("tracks",t,{track_genre_ids:i})}catch(e){return console.error(`Something went wrong updating column 'track_genre_ids' with new value '${i}' for track ID '${t}'`),!1}},t.updatePathCol=async(e,t,i)=>{try{return await e.update("tracks",t,{track_path:i})}catch(e){return console.error(`Something went wrong updating column 'track_path' with new value '${i}' for track ID '${t}'`),!1}},t.removeSmartFillReferences=async(e,t)=>{try{await s.deleteMeta(t,"track","smart-fill-guesses")}catch(e){return console.error(`Something went wrong when deleting the smart fill references for track ID ${t}`),!1}return!0},t.getTopTracks=async(e,t=24)=>{let i=`\n    SELECT *, COUNT(${e.prefix}music_tracks.track_release_id) AS timesPlayed\n    FROM ${e.prefix}music_history\n    LEFT JOIN ${e.prefix}music_tracks ON music_history_track_id = ${e.prefix}music_tracks.id\n    GROUP BY ${e.prefix}music_tracks.id\n    ORDER BY COUNT(${e.prefix}music_tracks.track_release_id) DESC\n    LIMIT $max`,r={$max:t};return await e.all(i,r)},t.getRecentlyPlayedTracks=async(e,t=24)=>{let i=`\n    SELECT ${e.prefix}music_history.id AS musichistoryid, * FROM ${e.prefix}music_history\n    LEFT JOIN ${e.prefix}music_tracks ON ${e.prefix}music_history.music_history_track_id = ${e.prefix}music_tracks.id\n    ORDER BY ${e.prefix}music_history.music_history_timestamp DESC\n    LIMIT $max`,r={$max:t};return await e.all(i,r)}},816:(e,t)=>{const i=[{base:"A",letters:/[\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F]/g},{base:"AA",letters:/[\uA732]/g},{base:"AE",letters:/[\u00C6\u01FC\u01E2]/g},{base:"AO",letters:/[\uA734]/g},{base:"AU",letters:/[\uA736]/g},{base:"AV",letters:/[\uA738\uA73A]/g},{base:"AY",letters:/[\uA73C]/g},{base:"B",letters:/[\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181]/g},{base:"C",letters:/[\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E]/g},{base:"D",letters:/[\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779]/g},{base:"DZ",letters:/[\u01F1\u01C4]/g},{base:"Dz",letters:/[\u01F2\u01C5]/g},{base:"E",letters:/[\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E]/g},{base:"F",letters:/[\u0046\u24BB\uFF26\u1E1E\u0191\uA77B]/g},{base:"G",letters:/[\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E]/g},{base:"H",letters:/[\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D]/g},{base:"I",letters:/[\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197]/g},{base:"J",letters:/[\u004A\u24BF\uFF2A\u0134\u0248]/g},{base:"K",letters:/[\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2]/g},{base:"L",letters:/[\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780]/g},{base:"LJ",letters:/[\u01C7]/g},{base:"Lj",letters:/[\u01C8]/g},{base:"M",letters:/[\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C]/g},{base:"N",letters:/[\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4]/g},{base:"NJ",letters:/[\u01CA]/g},{base:"Nj",letters:/[\u01CB]/g},{base:"O",letters:/[\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C]/g},{base:"OI",letters:/[\u01A2]/g},{base:"OO",letters:/[\uA74E]/g},{base:"OU",letters:/[\u0222]/g},{base:"P",letters:/[\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754]/g},{base:"Q",letters:/[\u0051\u24C6\uFF31\uA756\uA758\u024A]/g},{base:"R",letters:/[\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782]/g},{base:"S",letters:/[\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784]/g},{base:"T",letters:/[\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786]/g},{base:"TZ",letters:/[\uA728]/g},{base:"U",letters:/[\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244]/g},{base:"V",letters:/[\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245]/g},{base:"VY",letters:/[\uA760]/g},{base:"W",letters:/[\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72]/g},{base:"X",letters:/[\u0058\u24CD\uFF38\u1E8A\u1E8C]/g},{base:"Y",letters:/[\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE]/g},{base:"Z",letters:/[\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762]/g},{base:"a",letters:/[\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250]/g},{base:"aa",letters:/[\uA733]/g},{base:"ae",letters:/[\u00E6\u01FD\u01E3]/g},{base:"ao",letters:/[\uA735]/g},{base:"au",letters:/[\uA737]/g},{base:"av",letters:/[\uA739\uA73B]/g},{base:"ay",letters:/[\uA73D]/g},{base:"b",letters:/[\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253]/g},{base:"c",letters:/[\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184]/g},{base:"d",letters:/[\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A]/g},{base:"dz",letters:/[\u01F3\u01C6]/g},{base:"e",letters:/[\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD]/g},{base:"f",letters:/[\u0066\u24D5\uFF46\u1E1F\u0192\uA77C]/g},{base:"g",letters:/[\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F]/g},{base:"h",letters:/[\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265]/g},{base:"hv",letters:/[\u0195]/g},{base:"i",letters:/[\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131]/g},{base:"j",letters:/[\u006A\u24D9\uFF4A\u0135\u01F0\u0249]/g},{base:"k",letters:/[\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3]/g},{base:"l",letters:/[\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747]/g},{base:"lj",letters:/[\u01C9]/g},{base:"m",letters:/[\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F]/g},{base:"n",letters:/[\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5]/g},{base:"nj",letters:/[\u01CC]/g},{base:"o",letters:/[\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275]/g},{base:"oi",letters:/[\u01A3]/g},{base:"ou",letters:/[\u0223]/g},{base:"oo",letters:/[\uA74F]/g},{base:"p",letters:/[\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755]/g},{base:"q",letters:/[\u0071\u24E0\uFF51\u024B\uA757\uA759]/g},{base:"r",letters:/[\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783]/g},{base:"s",letters:/[\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B]/g},{base:"t",letters:/[\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787]/g},{base:"tz",letters:/[\uA729]/g},{base:"u",letters:/[\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289]/g},{base:"v",letters:/[\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C]/g},{base:"vy",letters:/[\uA761]/g},{base:"w",letters:/[\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73]/g},{base:"x",letters:/[\u0078\u24E7\uFF58\u1E8B\u1E8D]/g},{base:"y",letters:/[\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF]/g},{base:"z",letters:/[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763]/g}];t.formatPlaintextName=e=>{if(null===e)return e;for(let t=0;t<i.length;t++)e=e.replace(i[t].letters,i[t].base);return e}},6252:(e,t)=>{async function i(e,t){let i=`\n      SELECT * from ${e.prefix}music_tracks\n      WHERE track_plaintext_title LIKE '%' || $query || '%'\n      OR track_date LIKE $query`;return await e.all(i,{$query:t})}async function r(e,t){let i=`\n      SELECT * from ${e.prefix}music_releases\n      WHERE release_plaintext_title LIKE '%' || $query || '%'\n      OR release_year LIKE $query`;return await e.all(i,{$query:t})}async function a(e,t){let i=`\n      SELECT * from ${e.prefix}music_artists\n      WHERE artist_plaintext_name LIKE '%' || $query || '%'`;return await e.all(i,{$query:t})}async function s(e,t){let i=`\n      SELECT * from ${e.prefix}music_genres\n      WHERE genre_name LIKE '%' || $query || '%'`;return await e.all(i,{$query:t})}async function n(e,t){let i=`\n      SELECT * from ${e.prefix}music_playlists\n      WHERE playlist_name LIKE '%' || $query || '%'`;return await e.all(i,{$query:t})}t.search=(e,t)=>new Promise((async(o,u)=>{o({query:t,tracks:await i(e,t),musicReleases:await r(e,t),artists:await a(e,t),genres:await s(e,t),playlists:await n(e,t)})}))},6417:e=>{"use strict";e.exports=require("crypto")},8933:e=>{"use strict";e.exports=require("electron")},7710:e=>{"use strict";e.exports=require("fast-glob")},5747:e=>{"use strict";e.exports=require("fs")},1953:e=>{"use strict";e.exports=require("humanize-duration")},2732:e=>{"use strict";e.exports=require("md5-file")},4222:e=>{"use strict";e.exports=require("music-metadata")},5622:e=>{"use strict";e.exports=require("path")},6192:e=>{"use strict";e.exports=require("rimraf")},742:e=>{"use strict";e.exports=require("sharp")},9101:e=>{"use strict";e.exports=require("sqlite3")}},t={};function i(r){var a=t[r];if(void 0!==a)return a.exports;var s=t[r]={exports:{}};return e[r].call(s.exports,s,s.exports,i),s.exports}i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{const e=i(5622),{ipcRenderer:t}=i(8933),{DatabaseService:r}=i(4856),{IndexingService:a}=i(5079),s=i(7082),n=i(1953),{directoryCrud:o}=i(7587);let u=null;function l(e){console.log(e),t.send("IndexingService:OutputPipe",e)}function c(e){l({action:"internalError",data:e})}function d(e){if(e<1e4)return s.string("server.index-controls.importing-time-remaining-almost-done");if(e<6e4){let t=n(e,{units:["s"],round:!0});return s.string("server.index-controls.importing-time-remaining").replace("{{time}}",t)}{let t=n(e,{units:["d","h","m"],round:!0,largest:1});return s.string("server.index-controls.importing-time-remaining").replace("{{time}}",t)}}t.on("begin",(async(t,i)=>{console.log("BEGINDATA",i),async function(t,i,n,m){console.log("Beginning indexing in separate Electron BrowserWindow"),console.log(t,i,n);const p=new r({systemDir:t,appDir:"cardinalserver",tables:"server",tablePrefix:"server_",databaseFileName:i,imageCacheDirName:n});try{await p.connect(),await p.verify()||c("IndexingService could not verify database.")}catch(e){throw c("IndexingService could not connect to database."),console.error(e),e}let h=(await o.getAllDirectories(p)).map((e=>e.dir_path));u=new a({db:p,mode:m.mode||"quick",logging:!0,outputDir:e.join(p.appFilesPath,"IndexingServiceCache"),reportDir:e.join(p.appFilesPath,"IndexingServiceReports"),dirs:h,callbacks:{cantBegin:()=>{c("IndexingService triggered cantBegin callback.")},begun:()=>{l({action:"setStatus",data:"scanning"})},scanFoundFile:(e,t)=>{l({action:"scanFoundFile",data:e.masterList.length})},scanDone:e=>{l({action:"setStatus",data:"syncing"})},beforeFileSync:(e,t)=>{l({action:"beforeSync",data:t})},syncAddedFileToIndex:(e,t)=>{l({action:"syncAddedFileToIndex",data:t})},syncDeletedFileFromIndex:(e,t)=>{l({action:"syncDeletedFileFromIndex",data:t})},beforeImport:(e,t)=>{l({action:"beforeImport",data:t})},beforeFileImport:(e,t)=>{l({action:"beforeFileImport",data:t})},importLoopRunning:(e,t)=>{l({action:"setStatus",data:"importing"})},fileImported:(e,t)=>{l({action:"fileImported",data:t,percentage:e.getPercentageCompleted(),type:p.fileExtensionToMultimediaType(t.split(".").pop()),props:{fileName:t.split(/\\|\//gm).pop(),timeRemaining:d(e.getTimeRemaining()),processedLabel:s.string("server.index-controls.imported-file"),currentCount:e.currentlyIndexingFileNum,totalCount:e.masterList.length}})},fileUpdated:(e,t)=>{l({action:"fileUpdated",data:t,percentage:e.getPercentageCompleted(),props:{fileName:t.split(/\\|\//gm).pop(),timeRemaining:d(e.getTimeRemaining()),processedLabel:s.string("server.index-controls.updated-file"),currentCount:e.currentlyIndexingFileNum,totalCount:e.masterList.length}})},fileSkipped:(e,t)=>{l({action:"fileSkipped",data:t,percentage:e.getPercentageCompleted(),props:{fileName:t.split(/\\|\//gm).pop(),timeRemaining:d(e.getTimeRemaining()),processedLabel:s.string("server.index-controls.skipped-file"),currentCount:e.currentlyIndexingFileNum,totalCount:e.masterList.length}})},fileErrored:(e,t)=>{l({action:"fileErrored",data:t,percentage:e.getPercentageCompleted(),props:{fileName:t.split(/\\|\//gm).pop(),timeRemaining:d(e.getTimeRemaining()),processedLabel:s.string("server.index-controls.errored-file"),currentCount:e.currentlyIndexingFileNum,totalCount:e.masterList.length}})},done:e=>{l({action:"setStatus",data:"summary"}),l({action:"summary",data:{new:e.importedFiles,updated:e.updatedFiles,skipped:e.skippedFiles,deleted:e.deletedFiles,errored:e.erroredFiles,report:e.reportFile}}),l("CLOSEWINDOW")}}});try{u.begin()}catch(e){c(e.stack)}}(i.systemDir,i.DATABASE_NAME,i.IMAGE_CACHE_DIR,i.beginOpts)})),t.on("pause",(async e=>{console.log("Main process asked for pause"),u.pause()})),t.on("resume",(async e=>{console.log("Main process asked for resume"),u.resume()})),t.on("isPaused",(async e=>{console.log("Main process asked for isPaused"),t.send("isPaused-reply",u.paused)}))})()})();